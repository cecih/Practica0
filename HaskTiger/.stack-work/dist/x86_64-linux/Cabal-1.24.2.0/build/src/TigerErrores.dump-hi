
==================== FINAL INTERFACE ====================
2017-09-10 03:02:08.073304 UTC

interface HaskTiger-0.1.0.0-1NjWJIneMSYKOEJS7DxzEs:TigerErrores 8002
  interface hash: f9e6506d7bd9082e0a71a2138319adae
  ABI hash: 0494bdc5e70a4f3b7e7f3cd2a8df36e7
  export-list hash: 45cb60eadf487bb751c7c86293d60fdf
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: ab396f11155bd696ab63895436e6f1df
  sig of: Nothing
  used TH splices: False
  where
exports:
  TigerErrores.Daemon{TigerErrores.adder TigerErrores.derror TigerErrores.diffval TigerErrores.internal TigerErrores.notfound}
module dependencies: TigerSymbol
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0*
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 text-1.2.2.2@text-1.2.2.2-1cn50juu89QSL9QkUVcRY
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         text-1.2.2.2@text-1.2.2.2-1cn50juu89QSL9QkUVcRY:Data.Text
         text-1.2.2.2@text-1.2.2.2-1cn50juu89QSL9QkUVcRY:Data.Text.Show
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         text-1.2.2.2@text-1.2.2.2-1cn50juu89QSL9QkUVcRY:Data.Text
import  -/  TigerSymbol 7f64bcc3e38a9378b34cbe06e8c0cb9e
  exports: 461431869c9d4f5bf206765437ddd561
  Symbol 9260f1c2b584be005733445adbd4fb0e
  addStr f5d3f7f24155a939439e34977f939adb
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
4b6ee462a5164bbfc0674d32d88a0398
  $dmdiffval ::
    TigerErrores.Daemon w => forall a. TigerSymbol.Symbol -> w a
  {- Arity: 2,
     Strictness: <S(C(S)LLLL),1*U(1*C1(U),A,A,A,A)><L,1*U(U,U,U)>,
     Unfolding: InlineRule (0, True, False)
                (\ @ (w :: * -> *) ($dDaemon :: TigerErrores.Daemon w) @ a ->
                 let {
                   f :: TigerSymbol.Symbol -> w a
                   = TigerErrores.derror @ w $dDaemon @ a
                 } in
                 let {
                   g :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString# @ b "Different values: "#)
                 } in
                 \ (x :: TigerSymbol.Symbol) -> f (TigerSymbol.addStr g x)) -}
e582f124c7dfd456a090f8f2414bf341
  $dminternal ::
    TigerErrores.Daemon w => forall a. TigerSymbol.Symbol -> w a
  {- Arity: 2,
     Strictness: <S(C(S)LLLL),1*U(1*C1(U),A,A,A,A)><L,1*U(U,U,U)>,
     Unfolding: InlineRule (0, True, False)
                (\ @ (w :: * -> *) ($dDaemon :: TigerErrores.Daemon w) @ a ->
                 let {
                   f :: TigerSymbol.Symbol -> w a
                   = TigerErrores.derror @ w $dDaemon @ a
                 } in
                 let {
                   g :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "Internal: "#)
                 } in
                 \ (x :: TigerSymbol.Symbol) -> f (TigerSymbol.addStr g x)) -}
19ead0c7329e2cc0982bbb102a8f80ca
  $dmnotfound ::
    TigerErrores.Daemon w => forall a. TigerSymbol.Symbol -> w a
  {- Arity: 2,
     Strictness: <S(C(S)LLLL),1*U(1*C1(U),A,A,A,A)><L,1*U(U,U,U)>,
     Unfolding: InlineRule (0, True, False)
                (\ @ (w :: * -> *) ($dDaemon :: TigerErrores.Daemon w) @ a ->
                 let {
                   f :: TigerSymbol.Symbol -> w a
                   = TigerErrores.derror @ w $dDaemon @ a
                 } in
                 let {
                   g :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "Not found:"#)
                 } in
                 \ (x :: TigerSymbol.Symbol) -> f (TigerSymbol.addStr g x)) -}
043a703d41989d8c583ee7e7a5a2fdbf
  $tc'C:Daemon :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   106972826202863206##
                   6344908215195969210##
                   TigerErrores.$trModule
                   TigerErrores.$tc'C:Daemon1) -}
a4dd31a5322606403a2c0f02018daf38
  $tc'C:Daemon1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C:Daemon"#) -}
499d3d7ecf904ef60e42e258801098a1
  $tcDaemon :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9208814914610526404##
                   11762394038602567252##
                   TigerErrores.$trModule
                   TigerErrores.$tcDaemon1) -}
51ddbc55e00af47504bc54041c620a2a
  $tcDaemon1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Daemon"#) -}
c47ca13b551d8a1271c29e3ad71db125
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   TigerErrores.$trModule2
                   TigerErrores.$trModule1) -}
a9c479303c083a8c4f48722bf8f7a960
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "TigerErrores"#) -}
0c22ab3a0cc3601d96cf9da9d7980928
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "HaskTiger-0.1.0.0-1NjWJIneMSYKOEJS7DxzEs"#) -}
75602831f2e73bbe876cee9ba1b36693
  class Daemon (w :: * -> *) where
    derror :: TigerSymbol.Symbol -> w a
    adder :: w a -> TigerSymbol.Symbol -> w a
    notfound :: TigerSymbol.Symbol -> w a
    diffval :: TigerSymbol.Symbol -> w a
    internal :: TigerSymbol.Symbol -> w a
    {-# MINIMAL derror, adder #-}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

