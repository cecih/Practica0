
==================== FINAL INTERFACE ====================
2017-09-02 01:26:59.611087 UTC

interface HaskTiger-0.1.0.0-8sS9j76S4uUE6NaT8hRlFo:TigerEnv 8002
  interface hash: 7839352a11cb9dd8737997cdf0bc3496
  ABI hash: 1f816dfd4204bcbd4b001c8356707334
  export-list hash: 1aac8c06ececbe6508b79b66cbd1e97c
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: ab396f11155bd696ab63895436e6f1df
  sig of: Nothing
  used TH splices: False
  where
exports:
  TigerEnv.fromList
  TigerEnv.Environmental{TigerEnv.emptyI TigerEnv.insertI TigerEnv.intersecI TigerEnv.lookupI TigerEnv.updateI}
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
24884aa3a2e245cc3beca20ef76b9491
  $tc'C:Environmental :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7321999686352320974##
                   6176867977796168219##
                   TigerEnv.$trModule
                   TigerEnv.$tc'C:Environmental1) -}
73811651a0f890cd5860e5813139e036
  $tc'C:Environmental1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C:Environmental"#) -}
3c6ebd97fec21e1d4b9737a30b15e38a
  $tcEnvironmental :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14086727894228341427##
                   9761637278438938887##
                   TigerEnv.$trModule
                   TigerEnv.$tcEnvironmental1) -}
708dcb1885a2906edafbe356a955d9ca
  $tcEnvironmental1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Environmental"#) -}
3c36563b32c708ebefea9a6ca5fffb09
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   TigerEnv.$trModule2
                   TigerEnv.$trModule1) -}
1fc6fcd6cca5cfc792831afa0e96405c
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "TigerEnv"#) -}
1b48e0f35b718913ad1e2752426b816a
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "HaskTiger-0.1.0.0-8sS9j76S4uUE6NaT8hRlFo"#) -}
5939d8aeec50dafb02a15092c552da4e
  class Environmental (w :: * -> * -> *) where
    lookupI :: GHC.Classes.Ord a => a -> w a d -> GHC.Base.Maybe d
    insertI :: GHC.Classes.Ord a => a -> d -> w a d -> w a d
    intersecI :: GHC.Classes.Ord a =>
                 (d -> d -> d) -> w a d -> w a d -> w a d
    updateI :: GHC.Classes.Ord a => a -> d -> w a d -> w a d
    emptyI :: w a d
    {-# MINIMAL lookupI, insertI, intersecI, updateI, emptyI #-}
5a015e60831a19d1d85b717c3137030b
  fromList ::
    (GHC.Classes.Ord a, TigerEnv.Environmental m) => [(a, k)] -> m a k
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U><L,U(A,C(C1(C1(C1(U)))),A,A,1*U)><S,1*U>,
     Unfolding: (\ @ a
                   @ (m :: * -> * -> *)
                   @ k
                   ($dOrd :: GHC.Classes.Ord a)
                   ($dEnvironmental :: TigerEnv.Environmental m)
                   (eta :: [(a, k)]) ->
                 letrec {
                   go :: [(a, k)] -> m a k -> m a k
                     {- Arity: 2, Strictness: <S,1*U><L,U> -}
                   = \ (ds :: [(a, k)]) (eta1 :: m a k) ->
                     case ds of wild {
                       [] -> eta1
                       : y ys
                       -> go
                            ys
                            (case y of wild1 { (,) k1 d ->
                             TigerEnv.insertI @ m $dEnvironmental @ a @ k $dOrd k1 d eta1 }) }
                 } in
                 go eta (TigerEnv.emptyI @ m $dEnvironmental @ a @ k)) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

