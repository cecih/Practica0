
==================== FINAL INTERFACE ====================
2017-09-10 01:13:28.506357 UTC

interface HaskTiger-0.1.0.0-1NjWJIneMSYKOEJS7DxzEs:TigerEnv 8002
  interface hash: a66133495d98288ed09fcdc67f7caade
  ABI hash: 96a7e22cd83b9e952dd764ecbdc108be
  export-list hash: f849677415546cf37a0bf0a757f9fe16
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: ab396f11155bd696ab63895436e6f1df
  sig of: Nothing
  used TH splices: False
  where
exports:
  TigerEnv.fromList
  TigerEnv.Environmental{TigerEnv.emptyI TigerEnv.insertI TigerEnv.intersecI TigerEnv.lookupI TigerEnv.updateI}
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
0820b6255b1ccc6a442904a7b22d0fc2
  $tc'C:Environmental :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   570740128832944935##
                   12469789630853618851##
                   TigerEnv.$trModule
                   TigerEnv.$tc'C:Environmental1) -}
953afcff52689546c2125a4885b02460
  $tc'C:Environmental1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C:Environmental"#) -}
06abe83446e0d3fd3c110313d6b85647
  $tcEnvironmental :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7002059515758967978##
                   3055342818033653335##
                   TigerEnv.$trModule
                   TigerEnv.$tcEnvironmental1) -}
5491e65887298b0bf3e26c7446940fe1
  $tcEnvironmental1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Environmental"#) -}
ef89d3fae01a1eb13dcbe635e7fb561f
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   TigerEnv.$trModule2
                   TigerEnv.$trModule1) -}
79b80e5f970487df493376ed7ee0c8a0
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "TigerEnv"#) -}
77a72b84017d022e8738d080004fed74
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "HaskTiger-0.1.0.0-1NjWJIneMSYKOEJS7DxzEs"#) -}
d11fae9c796cad177435d0fb94c21710
  class Environmental (w :: * -> * -> *) where
    lookupI :: GHC.Classes.Ord a => a -> w a d -> GHC.Base.Maybe d
    insertI :: GHC.Classes.Ord a => a -> d -> w a d -> w a d
    intersecI :: GHC.Classes.Ord a =>
                 (d -> d -> d) -> w a d -> w a d -> w a d
    updateI :: GHC.Classes.Ord a => a -> d -> w a d -> w a d
    emptyI :: w a d
    {-# MINIMAL lookupI, insertI, intersecI, updateI, emptyI #-}
4f4acd7a3d74311ae1560a975667458f
  fromList ::
    (GHC.Classes.Ord a, TigerEnv.Environmental m) => [(a, k)] -> m a k
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U><L,U(A,C(C1(C1(C1(U)))),A,A,1*U)><S,1*U>,
     Unfolding: (\ @ a
                   @ (m :: * -> * -> *)
                   @ k
                   ($dOrd :: GHC.Classes.Ord a)
                   ($dEnvironmental :: TigerEnv.Environmental m)
                   (eta :: [(a, k)]) ->
                 letrec {
                   go :: [(a, k)] -> m a k -> m a k
                     {- Arity: 2, Strictness: <S,1*U><L,U> -}
                   = \ (ds :: [(a, k)]) (eta1 :: m a k) ->
                     case ds of wild {
                       [] -> eta1
                       : y ys
                       -> go
                            ys
                            (case y of wild1 { (,) k1 d ->
                             TigerEnv.insertI @ m $dEnvironmental @ a @ k $dOrd k1 d eta1 }) }
                 } in
                 go eta (TigerEnv.emptyI @ m $dEnvironmental @ a @ k)) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

