
==================== FINAL INTERFACE ====================
2017-09-07 00:00:08.111911 UTC

interface HaskTiger-0.1.0.0-1NjWJIneMSYKOEJS7DxzEs:TigerAbs 8002
  interface hash: ac2ca387bb37052687583d13b69809e5
  ABI hash: 37f30c082077bd2ed6390df841315dcd
  export-list hash: 3a90fdff097973025312591ea87ea06f
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 1101c93c8c43ce7a08f2562d7b27679a
  sig of: Nothing
  used TH splices: False
  where
exports:
  TigerAbs.posToLabel
  TigerAbs.printPos
  TigerAbs.Dec{TigerAbs.FunctionDec TigerAbs.TypeDec TigerAbs.VarDec}
  TigerAbs.Exp{TigerAbs.ArrayExp TigerAbs.AssignExp TigerAbs.BreakExp TigerAbs.CallExp TigerAbs.ForExp TigerAbs.IfExp TigerAbs.IntExp TigerAbs.LetExp TigerAbs.NilExp TigerAbs.OpExp TigerAbs.RecordExp TigerAbs.SeqExp TigerAbs.StringExp TigerAbs.UnitExp TigerAbs.VarExp TigerAbs.WhileExp}
  TigerAbs.Field
  TigerAbs.Oper{TigerAbs.DivideOp TigerAbs.EqOp TigerAbs.GeOp TigerAbs.GtOp TigerAbs.LeOp TigerAbs.LtOp TigerAbs.MinusOp TigerAbs.NeqOp TigerAbs.PlusOp TigerAbs.TimesOp}
  TigerAbs.Pos{TigerAbs.Range TigerAbs.Simple col line}
  TigerAbs.Ty{TigerAbs.ArrayTy TigerAbs.NameTy TigerAbs.RecordTy}
  TigerAbs.Var{TigerAbs.FieldVar TigerAbs.SimpleVar TigerAbs.SubscriptVar}
module dependencies: TigerSymbol
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0*
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 text-1.2.2.2@text-1.2.2.2-1cn50juu89QSL9QkUVcRY
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         text-1.2.2.2@text-1.2.2.2-1cn50juu89QSL9QkUVcRY:Data.Text
         text-1.2.2.2@text-1.2.2.2-1cn50juu89QSL9QkUVcRY:Data.Text.Show
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         text-1.2.2.2@text-1.2.2.2-1cn50juu89QSL9QkUVcRY:Data.Text
import  -/  TigerSymbol 7f64bcc3e38a9378b34cbe06e8c0cb9e
  exports: 461431869c9d4f5bf206765437ddd561
  Symbol 9260f1c2b584be005733445adbd4fb0e
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
49b0f3859ea1d6fd105d2ffa68df9b08
  $fShowDec :: GHC.Show.Show TigerAbs.Dec
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ TigerAbs.Dec
                  TigerAbs.$fShowDec_$cshowsPrec
                  TigerAbs.$fShowDec_$cshow
                  TigerAbs.$fShowDec_$cshowList -}
49b0f3859ea1d6fd105d2ffa68df9b08
  $fShowDec1 :: TigerAbs.Dec -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: TigerAbs.Dec) ->
                 TigerAbs.$w$cshowsPrec 0# w) -}
49b0f3859ea1d6fd105d2ffa68df9b08
  $fShowDec10 ::
    (Data.Text.Internal.Text, [TigerAbs.Field],
     GHC.Base.Maybe TigerSymbol.Symbol, TigerAbs.Exp, TigerAbs.Pos)
    -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ (w6 :: (Data.Text.Internal.Text, [TigerAbs.Field],
                           GHC.Base.Maybe TigerSymbol.Symbol, TigerAbs.Exp, TigerAbs.Pos))
                   (w7 :: GHC.Base.String)[OneShot] ->
                 case w6 of ww { (,,,,) ww1 ww2 ww3 ww4 ww5 ->
                 GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows7
                   (case Data.Text.Show.$w$cshowsPrec
                           ww1
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.shows5
                              (GHC.Show.$fShow(,,,,)_$sgo
                                 (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w7)
                                 (\ (eta :: GHC.Base.String) ->
                                  TigerAbs.$fShowDec_$s$fShow(,,)_$cshowList ww2 eta)
                                 (GHC.Types.:
                                    @ GHC.Show.ShowS
                                    (GHC.Show.$fShowMaybe_$cshowsPrec
                                       @ Data.Text.Internal.Text
                                       Data.Text.Show.$fShowText
                                       GHC.Show.shows22
                                       ww3)
                                    (GHC.Types.:
                                       @ GHC.Show.ShowS
                                       (TigerAbs.$w$cshowsPrec3 0# ww4)
                                       (GHC.Types.:
                                          @ GHC.Show.ShowS
                                          (\ (w :: GHC.Base.String) ->
                                           TigerAbs.$w$cshowsPrec1 0# ww5 w)
                                          (GHC.Types.[]
                                             @ GHC.Show.ShowS)))))) of ww7 { (#,#) ww8 ww9 ->
                    GHC.Types.: @ GHC.Types.Char ww8 ww9 }) }) -}
dce99a7e9152752960681c3180d97c18
  $fShowDec11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FunctionDec "#) -}
4bccb002be6b579304f4236c21a9cfea
  $fShowDec2 ::
    (Data.Text.Internal.Text, TigerAbs.Ty, TigerAbs.Pos)
    -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ (w4 :: (Data.Text.Internal.Text, TigerAbs.Ty,
                           TigerAbs.Pos))
                   (w5 :: GHC.Base.String)[OneShot] ->
                 case w4 of ww { (,,) ww1 ww2 ww3 ->
                 GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows7
                   (case Data.Text.Show.$w$cshowsPrec
                           ww1
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.shows5
                              (GHC.Show.$fShow(,,)_$sgo
                                 (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w5)
                                 (\ (w :: GHC.Base.String) -> TigerAbs.$w$cshowsPrec2 0# ww2 w)
                                 (GHC.Types.:
                                    @ GHC.Show.ShowS
                                    (\ (w :: GHC.Base.String) -> TigerAbs.$w$cshowsPrec1 0# ww3 w)
                                    (GHC.Types.[] @ GHC.Show.ShowS)))) of ww4 { (#,#) ww5 ww6 ->
                    GHC.Types.: @ GHC.Types.Char ww5 ww6 }) }) -}
b9eacb0fa502ba3b54a4309f7798cb14
  $fShowDec3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ArrayTy "#) -}
c8f49be9185ea6e5e9a3803802efa4d2
  $fShowDec4 ::
    (Data.Text.Internal.Text, GHC.Types.Bool, TigerAbs.Ty)
    -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2 -}
31010a705c4975290cb0c941cfb12acc
  $fShowDec5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "RecordTy "#) -}
862225248fc17918d2f37341c12ad380
  $fShowDec6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NameTy "#) -}
e26420b61aa7a5d3819e437633204c05
  $fShowDec7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TypeDec "#) -}
2c6ab598997e31abc8a94f8d40e0e9ef
  $fShowDec8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "VarDec "#) -}
1b540f10658eb97864543d8ac1b2338f
  $fShowDec9 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
49b0f3859ea1d6fd105d2ffa68df9b08
  $fShowDec_$cshow :: TigerAbs.Dec -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: TigerAbs.Dec) ->
                 TigerAbs.$fShowDec_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
49b0f3859ea1d6fd105d2ffa68df9b08
  $fShowDec_$cshowList :: [TigerAbs.Dec] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ TigerAbs.Dec
                   TigerAbs.$fShowDec1) -}
49b0f3859ea1d6fd105d2ffa68df9b08
  $fShowDec_$cshowsPrec ::
    GHC.Types.Int -> TigerAbs.Dec -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: TigerAbs.Dec) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 TigerAbs.$w$cshowsPrec ww1 w1 }) -}
25f362fed7ac206baa979315ec4f1253
  $fShowDec_$s$fShow(,,)_$cshowList ::
    [(Data.Text.Internal.Text, GHC.Types.Bool, TigerAbs.Ty)]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [(Data.Text.Internal.Text, GHC.Types.Bool,
                             TigerAbs.Ty)])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Data.Text.Internal.Text, GHC.Types.Bool, TigerAbs.Ty)
                   (GHC.Show.$fShow(,,)_$cshowsPrec
                      @ Data.Text.Internal.Text
                      @ GHC.Types.Bool
                      @ TigerAbs.Ty
                      Data.Text.Show.$fShowText
                      GHC.Show.$fShowBool
                      TigerAbs.$fShowTy
                      GHC.Show.shows22)
                   eta
                   eta1) -}
49b0f3859ea1d6fd105d2ffa68df9b08
  $fShowExp :: GHC.Show.Show TigerAbs.Exp
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ TigerAbs.Exp
                  TigerAbs.$fShowExp_$cshowsPrec
                  TigerAbs.$fShowExp_$cshow
                  TigerAbs.$fShowExp_$cshowList -}
49b0f3859ea1d6fd105d2ffa68df9b08
  $fShowExp1 :: TigerAbs.Exp -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: TigerAbs.Exp) ->
                 TigerAbs.$w$cshowsPrec3 0# w) -}
49b0f3859ea1d6fd105d2ffa68df9b08
  $fShowExp_$cshow :: TigerAbs.Exp -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: TigerAbs.Exp) ->
                 TigerAbs.$fShowExp_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
49b0f3859ea1d6fd105d2ffa68df9b08
  $fShowExp_$cshowList :: [TigerAbs.Exp] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ TigerAbs.Exp
                   TigerAbs.$fShowExp1) -}
49b0f3859ea1d6fd105d2ffa68df9b08
  $fShowExp_$cshowsPrec ::
    GHC.Types.Int -> TigerAbs.Exp -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: TigerAbs.Exp) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 TigerAbs.$w$cshowsPrec3 ww1 w1 }) -}
9fb9192acfe569c0dd087872d17a6654
  $fShowOper :: GHC.Show.Show TigerAbs.Oper
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ TigerAbs.Oper
                  TigerAbs.$fShowOper_$cshowsPrec
                  TigerAbs.$fShowOper_$cshow
                  TigerAbs.$fShowOper_$cshowList -}
098c96a3ff0862d645d7685e76ff764d
  $fShowOper1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "GeOp"#) -}
54335c391394183e01355236a3fca27e
  $fShowOper10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "PlusOp"#) -}
fdb0c3bdf21b1a2868132206a1984547
  $fShowOper2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "GtOp"#) -}
6de0d846fcbdb34a05959cc807ee42e1
  $fShowOper3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "LeOp"#) -}
3ac1a7a0c48db8b1d45b44f2172ced12
  $fShowOper4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "LtOp"#) -}
895f0beb4ebd63eb7a3f4bc595969d61
  $fShowOper5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NeqOp"#) -}
e357da978da80754a5fa8d38dff40f71
  $fShowOper6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "EqOp"#) -}
f846e7b4abc4aa428183711490639134
  $fShowOper7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DivideOp"#) -}
a1741f35a694813853d7cda16e112e76
  $fShowOper8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "TimesOp"#) -}
30db4e096df11725c36bb3391aa0711e
  $fShowOper9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "MinusOp"#) -}
9fb9192acfe569c0dd087872d17a6654
  $fShowOper_$cshow :: TigerAbs.Oper -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: TigerAbs.Oper) ->
                 TigerAbs.$fShowOper_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
9fb9192acfe569c0dd087872d17a6654
  $fShowOper_$cshowList :: [TigerAbs.Oper] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ TigerAbs.Oper
                   TigerAbs.$w$cshowsPrec4) -}
9fb9192acfe569c0dd087872d17a6654
  $fShowOper_$cshowsPrec ::
    GHC.Types.Int -> TigerAbs.Oper -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: TigerAbs.Oper)
                   (w2 :: GHC.Base.String) ->
                 TigerAbs.$w$cshowsPrec4 w1 w2) -}
fb36cd90a03c4961c3dee20c15acb197
  $fShowPos :: GHC.Show.Show TigerAbs.Pos
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ TigerAbs.Pos
                  TigerAbs.$fShowPos_$cshowsPrec
                  TigerAbs.$fShowPos_$cshow
                  TigerAbs.$fShowPos_$cshowList -}
fb36cd90a03c4961c3dee20c15acb197
  $fShowPos1 :: TigerAbs.Pos -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: TigerAbs.Pos) (w1 :: GHC.Base.String) ->
                 TigerAbs.$w$cshowsPrec1 0# w w1) -}
fb36cd90a03c4961c3dee20c15acb197
  $fShowPos_$cshow :: TigerAbs.Pos -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: TigerAbs.Pos) ->
                 TigerAbs.$fShowPos_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
fb36cd90a03c4961c3dee20c15acb197
  $fShowPos_$cshowList :: [TigerAbs.Pos] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ TigerAbs.Pos
                   TigerAbs.$fShowPos1) -}
fb36cd90a03c4961c3dee20c15acb197
  $fShowPos_$cshowsPrec ::
    GHC.Types.Int -> TigerAbs.Pos -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: TigerAbs.Pos)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 TigerAbs.$w$cshowsPrec1 ww1 w1 w2 }) -}
c8f49be9185ea6e5e9a3803802efa4d2
  $fShowTy :: GHC.Show.Show TigerAbs.Ty
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ TigerAbs.Ty
                  TigerAbs.$fShowTy_$cshowsPrec
                  TigerAbs.$fShowTy_$cshow
                  TigerAbs.$fShowTy_$cshowList -}
c8f49be9185ea6e5e9a3803802efa4d2
  $fShowTy1 :: TigerAbs.Ty -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: TigerAbs.Ty) (w1 :: GHC.Base.String) ->
                 TigerAbs.$w$cshowsPrec2 0# w w1) -}
c8f49be9185ea6e5e9a3803802efa4d2
  $fShowTy_$cshow :: TigerAbs.Ty -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: TigerAbs.Ty) ->
                 TigerAbs.$fShowTy_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
c8f49be9185ea6e5e9a3803802efa4d2
  $fShowTy_$cshowList :: [TigerAbs.Ty] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ TigerAbs.Ty
                   TigerAbs.$fShowTy1) -}
c8f49be9185ea6e5e9a3803802efa4d2
  $fShowTy_$cshowsPrec ::
    GHC.Types.Int -> TigerAbs.Ty -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: TigerAbs.Ty)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 TigerAbs.$w$cshowsPrec2 ww1 w1 w2 }) -}
49b0f3859ea1d6fd105d2ffa68df9b08
  $fShowVar :: GHC.Show.Show TigerAbs.Var
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ TigerAbs.Var
                  TigerAbs.$fShowVar_$cshowsPrec
                  TigerAbs.$fShowVar_$cshow
                  TigerAbs.$fShowVar_$cshowList -}
49b0f3859ea1d6fd105d2ffa68df9b08
  $fShowVar1 :: TigerAbs.Var -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: TigerAbs.Var) ->
                 TigerAbs.$w$cshowsPrec5 0# w) -}
49b0f3859ea1d6fd105d2ffa68df9b08
  $fShowVar_$cshow :: TigerAbs.Var -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: TigerAbs.Var) ->
                 TigerAbs.$fShowVar_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
49b0f3859ea1d6fd105d2ffa68df9b08
  $fShowVar_$cshowList :: [TigerAbs.Var] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ TigerAbs.Var
                   TigerAbs.$fShowVar1) -}
49b0f3859ea1d6fd105d2ffa68df9b08
  $fShowVar_$cshowsPrec ::
    GHC.Types.Int -> TigerAbs.Var -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: TigerAbs.Var) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 TigerAbs.$w$cshowsPrec5 ww1 w1 }) -}
0fea6b89df6d896565a344f6deca1cf5
  $tc'ArrayExp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10170918593844210079##
                   4181392146001586449##
                   TigerAbs.$trModule
                   TigerAbs.$tc'ArrayExp1) -}
193b12c2da4d447e939703594bed6fc0
  $tc'ArrayExp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ArrayExp"#) -}
190e0c7ad9f7021aedaab3f5d18fcafc
  $tc'ArrayTy :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6490373983567328750##
                   9635792117163290467##
                   TigerAbs.$trModule
                   TigerAbs.$tc'ArrayTy1) -}
36bf4b9422781f888e61d6c9fdb78796
  $tc'ArrayTy1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ArrayTy"#) -}
10c50ed5d3adb1d2c03de510c5668c76
  $tc'AssignExp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1400811172925834454##
                   13444747756956097601##
                   TigerAbs.$trModule
                   TigerAbs.$tc'AssignExp1) -}
d8b6a3260c28896ca0cc4997482dd1f0
  $tc'AssignExp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'AssignExp"#) -}
92fa5b074ba1c4f49445657bca3fe268
  $tc'BreakExp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1037580344773486181##
                   4684376867144251914##
                   TigerAbs.$trModule
                   TigerAbs.$tc'BreakExp1) -}
118eefa872841f701a2bfe4094b1eac1
  $tc'BreakExp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'BreakExp"#) -}
2a4492747445f984f7f56ad0c077b970
  $tc'CallExp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   552287461786685125##
                   6317678780039946407##
                   TigerAbs.$trModule
                   TigerAbs.$tc'CallExp1) -}
a035401e5504500da62832503d191a27
  $tc'CallExp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'CallExp"#) -}
99a7a5ac334655b3712d085b6054fc13
  $tc'DivideOp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14863881562448267869##
                   17965376582775509644##
                   TigerAbs.$trModule
                   TigerAbs.$tc'DivideOp1) -}
9f99391708937b623fe599898d88d38a
  $tc'DivideOp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'DivideOp"#) -}
64a11e542ecb5f3b50227d44e72bf2c3
  $tc'EqOp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12190512399718668160##
                   1515265967198880068##
                   TigerAbs.$trModule
                   TigerAbs.$tc'EqOp1) -}
4a6221c6ad02e13c4be221692ff2b5d1
  $tc'EqOp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'EqOp"#) -}
788a053af3bb004ace7943677ddf40bd
  $tc'FieldVar :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13824576379976740102##
                   16206555528083123233##
                   TigerAbs.$trModule
                   TigerAbs.$tc'FieldVar1) -}
55a96b153b6576136e1667d853ca3028
  $tc'FieldVar1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'FieldVar"#) -}
de6cc991696e9fa9b088fe62d2e63916
  $tc'ForExp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5410554979058036815##
                   8544073414098645773##
                   TigerAbs.$trModule
                   TigerAbs.$tc'ForExp1) -}
661920df5da808a7a1857330b4738b7a
  $tc'ForExp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ForExp"#) -}
400ff67ba2942de88478dccf13751901
  $tc'FunctionDec :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12840472047987726685##
                   5045450839111173432##
                   TigerAbs.$trModule
                   TigerAbs.$tc'FunctionDec1) -}
b7c8253847325ef6b78402b083283b9d
  $tc'FunctionDec1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'FunctionDec"#) -}
624620d291921f2030880156483100d4
  $tc'GeOp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   560658798541631720##
                   7497700880181448530##
                   TigerAbs.$trModule
                   TigerAbs.$tc'GeOp1) -}
a7bce306eaf8424bccfb65b1f48a1bcd
  $tc'GeOp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'GeOp"#) -}
fa60f73efa8c38168e7e62258e4f733b
  $tc'GtOp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15668843463079518177##
                   6605063123663432924##
                   TigerAbs.$trModule
                   TigerAbs.$tc'GtOp1) -}
c4fd9bcc14ff8e128b5b6b3031cb90a1
  $tc'GtOp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'GtOp"#) -}
443cdab48f1e1623b91367bd87f040f0
  $tc'IfExp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3436507335183687727##
                   7864174181160627043##
                   TigerAbs.$trModule
                   TigerAbs.$tc'IfExp1) -}
4150a4da4267d782c268cc1250244231
  $tc'IfExp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'IfExp"#) -}
1083ebc065770404ec5740b542d5f3df
  $tc'IntExp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13220189270514221598##
                   12273464058325216978##
                   TigerAbs.$trModule
                   TigerAbs.$tc'IntExp1) -}
ade40746ee7a02beef5d10288e3d99bd
  $tc'IntExp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'IntExp"#) -}
9965a9dd6800f1bc9bf5d851f771f665
  $tc'LeOp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7002637792171434007##
                   2391878679108686843##
                   TigerAbs.$trModule
                   TigerAbs.$tc'LeOp1) -}
ed232cf772c2dab32378e2657c3333f4
  $tc'LeOp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'LeOp"#) -}
a13545f665dac2405030e8bff648cfc4
  $tc'LetExp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2960785164629916121##
                   9713630169099297029##
                   TigerAbs.$trModule
                   TigerAbs.$tc'LetExp1) -}
1eb0a105b5525694b6751ce20f120594
  $tc'LetExp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'LetExp"#) -}
cec6ec0a8a899e2d37909c8e3b62079e
  $tc'LtOp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12373900428234056894##
                   12025964055846498599##
                   TigerAbs.$trModule
                   TigerAbs.$tc'LtOp1) -}
9b72d207a422f6ab62d46a354afb614e
  $tc'LtOp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'LtOp"#) -}
34868a9a7b854022eccf0ec8177f24f4
  $tc'MinusOp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   423349990587543678##
                   1687606164350606957##
                   TigerAbs.$trModule
                   TigerAbs.$tc'MinusOp1) -}
a986bdb240c3f56afa1e76beed15979c
  $tc'MinusOp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'MinusOp"#) -}
9eefb08609c2c6b9c8e8bc8fef0170cd
  $tc'NameTy :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3478810163750649250##
                   1654464824360503405##
                   TigerAbs.$trModule
                   TigerAbs.$tc'NameTy1) -}
c485c9cb21935d3ac2bac6b3374bba72
  $tc'NameTy1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NameTy"#) -}
11ecf73b4e6a95a0bd2aff0ee1950654
  $tc'NeqOp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3479947428047761667##
                   9129682806944426418##
                   TigerAbs.$trModule
                   TigerAbs.$tc'NeqOp1) -}
4196b0aa1cb66d44ecbd4be22266df6b
  $tc'NeqOp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NeqOp"#) -}
5588c12b6cc117704592ae5598cd47f0
  $tc'NilExp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4315534267765090743##
                   518749753673924692##
                   TigerAbs.$trModule
                   TigerAbs.$tc'NilExp1) -}
38422e283f50a17f89d6126f2acbd8b0
  $tc'NilExp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NilExp"#) -}
b60a018dcb0b103ae9036394c730d11d
  $tc'OpExp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6622462532811334574##
                   1517627181992275864##
                   TigerAbs.$trModule
                   TigerAbs.$tc'OpExp1) -}
b9398619970249af9cd000b16cd6064a
  $tc'OpExp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'OpExp"#) -}
86a0725743528f1221f67c9fa085abe0
  $tc'PlusOp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3783929520801112001##
                   16766753268896823442##
                   TigerAbs.$trModule
                   TigerAbs.$tc'PlusOp1) -}
d20df929a3fb7cbf06e680d8e389a5bc
  $tc'PlusOp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PlusOp"#) -}
3dc6c0ef1ecc8e1fa774bc8cfa62fa15
  $tc'Range :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11341804353581071498##
                   2458945819632375844##
                   TigerAbs.$trModule
                   TigerAbs.$tc'Range1) -}
3c93149adbafc9691b341fd6a834751a
  $tc'Range1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Range"#) -}
691341e981a6da502c5468740864d286
  $tc'RecordExp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4619582801036743461##
                   3657371210072494567##
                   TigerAbs.$trModule
                   TigerAbs.$tc'RecordExp1) -}
3ca6503c680f39c65c9ae1558ed5d965
  $tc'RecordExp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'RecordExp"#) -}
9b843848e53ee8f303a74ba70ee578c5
  $tc'RecordTy :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4839610433128339079##
                   18422896939242435375##
                   TigerAbs.$trModule
                   TigerAbs.$tc'RecordTy1) -}
f83a975b8b3908ce64ed9576279bc870
  $tc'RecordTy1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'RecordTy"#) -}
a9e15f06e01fe3da5b28303137656f85
  $tc'SeqExp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7350857586581790168##
                   5771011807566920308##
                   TigerAbs.$trModule
                   TigerAbs.$tc'SeqExp1) -}
a8e345d276392683932845a1f3292faf
  $tc'SeqExp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'SeqExp"#) -}
1d88ec15ebeeebfde0ca9f2b4e202d38
  $tc'Simple :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12005395590614199740##
                   6908396986369065624##
                   TigerAbs.$trModule
                   TigerAbs.$tc'Simple1) -}
06f5ca1d06343ee156e2b7b2edcd5427
  $tc'Simple1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Simple"#) -}
3b72fb69ff15e92ae2df8f58b5a9153f
  $tc'SimpleVar :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8731635218250817414##
                   13409004154243278659##
                   TigerAbs.$trModule
                   TigerAbs.$tc'SimpleVar1) -}
2dcda3fdf82e0a05e1babecdc9ffa417
  $tc'SimpleVar1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'SimpleVar"#) -}
5eb9843db22e166e9d70d31021b0ac7b
  $tc'StringExp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18008491225290811249##
                   3806144492310731426##
                   TigerAbs.$trModule
                   TigerAbs.$tc'StringExp1) -}
3080143dfcf402e88d77acaca51d7e9a
  $tc'StringExp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'StringExp"#) -}
ee2ba104f2c64670e7b1f0b780a13e08
  $tc'SubscriptVar :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8541959885648919722##
                   4719021724205514593##
                   TigerAbs.$trModule
                   TigerAbs.$tc'SubscriptVar1) -}
8d9b1c8e975eebaefeb958fdedd30f37
  $tc'SubscriptVar1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'SubscriptVar"#) -}
a96f4759e64304bc8baa2abfea33539f
  $tc'TimesOp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5668281725752652330##
                   7035443836257861910##
                   TigerAbs.$trModule
                   TigerAbs.$tc'TimesOp1) -}
a4a0753aa821cac6984000d774594153
  $tc'TimesOp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TimesOp"#) -}
7d3c26998be77acd3d985e64150ed770
  $tc'TypeDec :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5818665763603790482##
                   8425053239726451213##
                   TigerAbs.$trModule
                   TigerAbs.$tc'TypeDec1) -}
31b577080b13aa1f82aec310218a8bd5
  $tc'TypeDec1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'TypeDec"#) -}
eb13a3b06107bc279270073a6311e910
  $tc'UnitExp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1664669871894612073##
                   13203086266139259035##
                   TigerAbs.$trModule
                   TigerAbs.$tc'UnitExp1) -}
499b23565b69e293435ec866b7401f67
  $tc'UnitExp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'UnitExp"#) -}
e836f2417cf0bd1460a9c17ae43d4270
  $tc'VarDec :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16921485192525193453##
                   17708623754988428310##
                   TigerAbs.$trModule
                   TigerAbs.$tc'VarDec1) -}
ba57bdfef639b0d99124606ed76d52c2
  $tc'VarDec1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'VarDec"#) -}
42d3733edd27b1df16a3bff1e2093e06
  $tc'VarExp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18245883384832589430##
                   11285504370088383251##
                   TigerAbs.$trModule
                   TigerAbs.$tc'VarExp1) -}
c7dbc228d5b5a8fa95c1183b37bddd33
  $tc'VarExp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'VarExp"#) -}
26669451bb7b072317f41cb851a390b3
  $tc'WhileExp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1065783216223346671##
                   16591311969483255696##
                   TigerAbs.$trModule
                   TigerAbs.$tc'WhileExp1) -}
0643309788d137a6eff959946764a9be
  $tc'WhileExp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'WhileExp"#) -}
a7e88f4a9694bf08947a341160edc3f7
  $tcDec :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12511948555314378878##
                   12457094625307843568##
                   TigerAbs.$trModule
                   TigerAbs.$tcDec1) -}
24cc1108bc4f585b3e2659dc61941aa3
  $tcDec1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Dec"#) -}
54fd2d1b9a605e620ffc2bd070d67eaa
  $tcExp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16760538321383588160##
                   17288874079009816926##
                   TigerAbs.$trModule
                   TigerAbs.$tcExp1) -}
f63d357492d080f354f38825c2ca7a97
  $tcExp1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Exp"#) -}
9bfab31abfad2d20936b04192a7fe3ba
  $tcOper :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17045702136513395710##
                   12868468993953367922##
                   TigerAbs.$trModule
                   TigerAbs.$tcOper1) -}
36cc321ec7f8ba7c27f5e28d54da86dd
  $tcOper1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Oper"#) -}
4d7393e1956f6a80abf707d866675728
  $tcPos :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9059228023043743547##
                   4255553312825077235##
                   TigerAbs.$trModule
                   TigerAbs.$tcPos1) -}
b23136d556b287ac929da61be32816e8
  $tcPos1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Pos"#) -}
771958221a22a91261b0418e507be5cd
  $tcTy :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3893906985904508764##
                   5549633807695367716##
                   TigerAbs.$trModule
                   TigerAbs.$tcTy1) -}
f9c5ee86ee22edf71aa74a66485c296b
  $tcTy1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Ty"#) -}
6a9bf1c160e5ab140d68506b577a931e
  $tcVar :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14212995588983492707##
                   18385456903830403113##
                   TigerAbs.$trModule
                   TigerAbs.$tcVar1) -}
de2136a29d31a00fadbbc120cf95465c
  $tcVar1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Var"#) -}
e4d30d6353027c6da9e9a8281a0f2c98
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   TigerAbs.$trModule2
                   TigerAbs.$trModule1) -}
3a02577de0f5390fa21e23fb1b4810d5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "TigerAbs"#) -}
15e8451b23d55bbec12c09b1e87ba082
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "HaskTiger-0.1.0.0-1NjWJIneMSYKOEJS7DxzEs"#) -}
49b0f3859ea1d6fd105d2ffa68df9b08
  $w$cshowsPrec :: GHC.Prim.Int# -> TigerAbs.Dec -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (w :: TigerAbs.Dec) ->
                 case w of wild {
                   TigerAbs.FunctionDec b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             TigerAbs.$fShowDec11
                             (GHC.Show.showList__
                                @ (Data.Text.Internal.Text, [TigerAbs.Field],
                                   GHC.Base.Maybe TigerSymbol.Symbol, TigerAbs.Exp, TigerAbs.Pos)
                                TigerAbs.$fShowDec10
                                b1
                                x)
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                TigerAbs.$fShowDec11
                                (GHC.Show.showList__
                                   @ (Data.Text.Internal.Text, [TigerAbs.Field],
                                      GHC.Base.Maybe TigerSymbol.Symbol, TigerAbs.Exp, TigerAbs.Pos)
                                   TigerAbs.$fShowDec10
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) }
                   TigerAbs.VarDec b1 b2 b3 b4 b5
                   -> let {
                        f :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.$fShowMaybe_$cshowsPrec
                            @ Data.Text.Internal.Text
                            Data.Text.Show.$fShowText
                            TigerAbs.$fShowDec9
                            b3
                      } in
                      let {
                        f1 :: GHC.Base.String -> GHC.Base.String
                        = TigerAbs.$w$cshowsPrec3 11# b4
                      } in
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ (x :: GHC.Base.String) ->
                          case Data.Text.Show.$w$cshowsPrec
                                 b1
                                 (GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.showSpace1
                                    (let {
                                       eta :: GHC.Base.String
                                       = f (GHC.Types.:
                                              @ GHC.Types.Char
                                              GHC.Show.showSpace1
                                              (f1
                                                 (GHC.Types.:
                                                    @ GHC.Types.Char
                                                    GHC.Show.showSpace1
                                                    (TigerAbs.$w$cshowsPrec1 11# b5 x))))
                                     } in
                                     case b2 of wild1 {
                                       GHC.Types.False
                                       -> GHC.Base.++
                                            @ GHC.Types.Char
                                            GHC.Show.shows18
                                            (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 eta)
                                       GHC.Types.True
                                       -> GHC.Base.++
                                            @ GHC.Types.Char
                                            GHC.Show.shows17
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               GHC.Show.showSpace1
                                               eta) })) of ww1 { (#,#) ww2 ww3 ->
                          GHC.Types.: @ GHC.Types.Char ww2 ww3 }
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char TigerAbs.$fShowDec8 (g x)
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                TigerAbs.$fShowDec8
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) }
                   TigerAbs.TypeDec b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             TigerAbs.$fShowDec7
                             (GHC.Show.showList__
                                @ (Data.Text.Internal.Text, TigerAbs.Ty, TigerAbs.Pos)
                                TigerAbs.$fShowDec2
                                b1
                                x)
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                TigerAbs.$fShowDec7
                                (GHC.Show.showList__
                                   @ (Data.Text.Internal.Text, TigerAbs.Ty, TigerAbs.Pos)
                                   TigerAbs.$fShowDec2
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) } }) -}
fb36cd90a03c4961c3dee20c15acb197
  $w$cshowsPrec1 ::
    GHC.Prim.Int# -> TigerAbs.Pos -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [0] -}
c8f49be9185ea6e5e9a3803802efa4d2
  $w$cshowsPrec2 ::
    GHC.Prim.Int# -> TigerAbs.Ty -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: TigerAbs.Ty)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   TigerAbs.NameTy b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             TigerAbs.$fShowDec6
                             (case Data.Text.Show.$w$cshowsPrec b1 w1 of ww1 { (#,#) ww2 ww3 ->
                              GHC.Types.: @ GHC.Types.Char ww2 ww3 })
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                TigerAbs.$fShowDec6
                                (case Data.Text.Show.$w$cshowsPrec
                                        b1
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.shows4
                                           w1) of ww1 { (#,#) ww2 ww3 ->
                                 GHC.Types.: @ GHC.Types.Char ww2 ww3 })) }
                   TigerAbs.RecordTy b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             TigerAbs.$fShowDec5
                             (GHC.Show.showList__
                                @ (Data.Text.Internal.Text, GHC.Types.Bool, TigerAbs.Ty)
                                TigerAbs.$fShowDec4
                                b1
                                w1)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                TigerAbs.$fShowDec5
                                (GHC.Show.showList__
                                   @ (Data.Text.Internal.Text, GHC.Types.Bool, TigerAbs.Ty)
                                   TigerAbs.$fShowDec4
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w1))) }
                   TigerAbs.ArrayTy b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             TigerAbs.$fShowDec3
                             (case Data.Text.Show.$w$cshowsPrec b1 w1 of ww1 { (#,#) ww2 ww3 ->
                              GHC.Types.: @ GHC.Types.Char ww2 ww3 })
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                TigerAbs.$fShowDec3
                                (case Data.Text.Show.$w$cshowsPrec
                                        b1
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.shows4
                                           w1) of ww1 { (#,#) ww2 ww3 ->
                                 GHC.Types.: @ GHC.Types.Char ww2 ww3 })) } }) -}
49b0f3859ea1d6fd105d2ffa68df9b08
  $w$cshowsPrec3 :: GHC.Prim.Int# -> TigerAbs.Exp -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0] -}
9fb9192acfe569c0dd087872d17a6654
  $w$cshowsPrec4 ::
    TigerAbs.Oper -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: TigerAbs.Oper) (w1 :: GHC.Base.String) ->
                 case w of wild {
                   TigerAbs.PlusOp
                   -> GHC.Base.++ @ GHC.Types.Char TigerAbs.$fShowOper10 w1
                   TigerAbs.MinusOp
                   -> GHC.Base.++ @ GHC.Types.Char TigerAbs.$fShowOper9 w1
                   TigerAbs.TimesOp
                   -> GHC.Base.++ @ GHC.Types.Char TigerAbs.$fShowOper8 w1
                   TigerAbs.DivideOp
                   -> GHC.Base.++ @ GHC.Types.Char TigerAbs.$fShowOper7 w1
                   TigerAbs.EqOp
                   -> GHC.Base.++ @ GHC.Types.Char TigerAbs.$fShowOper6 w1
                   TigerAbs.NeqOp
                   -> GHC.Base.++ @ GHC.Types.Char TigerAbs.$fShowOper5 w1
                   TigerAbs.LtOp
                   -> GHC.Base.++ @ GHC.Types.Char TigerAbs.$fShowOper4 w1
                   TigerAbs.LeOp
                   -> GHC.Base.++ @ GHC.Types.Char TigerAbs.$fShowOper3 w1
                   TigerAbs.GtOp
                   -> GHC.Base.++ @ GHC.Types.Char TigerAbs.$fShowOper2 w1
                   TigerAbs.GeOp
                   -> GHC.Base.++ @ GHC.Types.Char TigerAbs.$fShowOper1 w1 }) -}
49b0f3859ea1d6fd105d2ffa68df9b08
  $w$cshowsPrec5 :: GHC.Prim.Int# -> TigerAbs.Var -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0] -}
49b0f3859ea1d6fd105d2ffa68df9b08
  data Dec where
    FunctionDec :: [(TigerSymbol.Symbol, [TigerAbs.Field],
                     GHC.Base.Maybe TigerSymbol.Symbol, TigerAbs.Exp, TigerAbs.Pos)]
                   -> Dec
    VarDec :: TigerSymbol.Symbol -> GHC.Types.Bool
              -> (GHC.Base.Maybe TigerSymbol.Symbol) -> TigerAbs.Exp
              -> TigerAbs.Pos -> Dec
    TypeDec :: [(TigerSymbol.Symbol, TigerAbs.Ty, TigerAbs.Pos)] -> Dec
49b0f3859ea1d6fd105d2ffa68df9b08
  data Exp where
    VarExp :: TigerAbs.Var -> TigerAbs.Pos -> Exp
    UnitExp :: TigerAbs.Pos -> Exp
    BreakExp :: TigerAbs.Pos -> Exp
    NilExp :: TigerAbs.Pos -> Exp
    IntExp :: GHC.Types.Int -> TigerAbs.Pos -> Exp
    StringExp :: GHC.Base.String -> TigerAbs.Pos -> Exp
    CallExp :: TigerSymbol.Symbol -> [TigerAbs.Exp] -> TigerAbs.Pos
               -> Exp
    OpExp :: TigerAbs.Exp -> TigerAbs.Oper -> TigerAbs.Exp
             -> TigerAbs.Pos -> Exp
    RecordExp :: [(TigerSymbol.Symbol, TigerAbs.Exp)]
                 -> TigerSymbol.Symbol -> TigerAbs.Pos -> Exp
    SeqExp :: [TigerAbs.Exp] -> TigerAbs.Pos -> Exp
    AssignExp :: TigerAbs.Var -> TigerAbs.Exp -> TigerAbs.Pos -> Exp
    IfExp :: TigerAbs.Exp -> TigerAbs.Exp
             -> (GHC.Base.Maybe TigerAbs.Exp) -> TigerAbs.Pos -> Exp
    WhileExp :: TigerAbs.Exp -> TigerAbs.Exp -> TigerAbs.Pos -> Exp
    ForExp :: TigerSymbol.Symbol -> GHC.Types.Bool -> TigerAbs.Exp
              -> TigerAbs.Exp -> TigerAbs.Exp -> TigerAbs.Pos -> Exp
    LetExp :: [TigerAbs.Dec] -> TigerAbs.Exp -> TigerAbs.Pos -> Exp
    ArrayExp :: TigerSymbol.Symbol -> TigerAbs.Exp -> TigerAbs.Exp
                -> TigerAbs.Pos -> Exp
c8f49be9185ea6e5e9a3803802efa4d2
  type Field = (TigerSymbol.Symbol, GHC.Types.Bool, TigerAbs.Ty)
9fb9192acfe569c0dd087872d17a6654
  data Oper
    = PlusOp
    | MinusOp
    | TimesOp
    | DivideOp
    | EqOp
    | NeqOp
    | LtOp
    | LeOp
    | GtOp
    | GeOp
fb36cd90a03c4961c3dee20c15acb197
  data Pos
    = Simple {line :: GHC.Types.Int, col :: GHC.Types.Int}
    | Range TigerAbs.Pos TigerAbs.Pos
c8f49be9185ea6e5e9a3803802efa4d2
  data Ty
    = NameTy TigerSymbol.Symbol
    | RecordTy [TigerAbs.Field]
    | ArrayTy TigerSymbol.Symbol
49b0f3859ea1d6fd105d2ffa68df9b08
  data Var where
    SimpleVar :: TigerSymbol.Symbol -> Var
    FieldVar :: TigerAbs.Var -> TigerSymbol.Symbol -> Var
    SubscriptVar :: TigerAbs.Var -> TigerAbs.Exp -> Var
fb7cd2a3be24a6fcbcbda8b2a38462b5
  col :: TigerAbs.Pos -> GHC.Types.Int
  RecSel Left TigerAbs.Pos
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: TigerAbs.Pos) ->
                 case ds of wild {
                   TigerAbs.Simple ds1 ds2 -> ds2
                   TigerAbs.Range ipv ipv1 -> TigerAbs.col1 }) -}
4e17b41de7796e80e6f0b5d2153a8c35
  col1 :: GHC.Types.Int
  {- Strictness: x -}
e7043344b54b9fd3b428081f2fb7a147
  line :: TigerAbs.Pos -> GHC.Types.Int
  RecSel Left TigerAbs.Pos
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: TigerAbs.Pos) ->
                 case ds of wild {
                   TigerAbs.Simple ds1 ds2 -> ds1
                   TigerAbs.Range ipv ipv1 -> TigerAbs.line1 }) -}
669b2acce34189f3e763af6a7ce4d67e
  line1 :: GHC.Types.Int
  {- Strictness: x -}
4b325da0289ea793bdb7f1b0c415a1cb
  posToLabel :: TigerAbs.Pos -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
ca3b01c561c5187981dd3982f6b86bb7
  printPos :: TigerAbs.Pos -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U> -}
instance [safe] GHC.Show.Show [TigerAbs.Dec] = TigerAbs.$fShowDec
instance [safe] GHC.Show.Show [TigerAbs.Exp] = TigerAbs.$fShowExp
instance [safe] GHC.Show.Show [TigerAbs.Oper] = TigerAbs.$fShowOper
instance [safe] GHC.Show.Show [TigerAbs.Pos] = TigerAbs.$fShowPos
instance [safe] GHC.Show.Show [TigerAbs.Ty] = TigerAbs.$fShowTy
instance [safe] GHC.Show.Show [TigerAbs.Var] = TigerAbs.$fShowVar
"SPEC/TigerAbs $fShow(,,)_$cshowList @ Text @ Bool @ Ty" [ALWAYS] forall ($dShow2 :: GHC.Show.Show
                                                                                       TigerAbs.Ty)
                                                                         ($dShow1 :: GHC.Show.Show
                                                                                       GHC.Types.Bool)
                                                                         ($dShow :: GHC.Show.Show
                                                                                      Data.Text.Internal.Text)
  GHC.Show.$fShow(,,)_$cshowList @ Data.Text.Internal.Text
                                 @ GHC.Types.Bool
                                 @ TigerAbs.Ty
                                 $dShow
                                 $dShow1
                                 $dShow2
  = TigerAbs.$fShowDec_$s$fShow(,,)_$cshowList
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

