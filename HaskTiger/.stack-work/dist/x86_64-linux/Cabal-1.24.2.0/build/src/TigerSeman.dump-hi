
==================== FINAL INTERFACE ====================
2017-09-11 05:29:42.82484 UTC

interface HaskTiger-0.1.0.0-1NjWJIneMSYKOEJS7DxzEs:TigerSeman 8002
  interface hash: 82ba6252b27ea94d2ca52a1418d531c4
  ABI hash: c805e0c921669da57aba78b581bc1770
  export-list hash: acfb6088be6739bfee36613b6ca22054
  orphan hash: 6ca9d3b42cc4d86b8d5daa3fc4be7680
  flag hash: e42325c67e4cbf35a695cbd293698255
  sig of: Nothing
  used TH splices: False
  where
exports:
  TigerSeman.addpos
  TigerSeman.buscarM
  TigerSeman.cmpZip
  TigerSeman.depend
  TigerSeman.errAppend
  TigerSeman.fromTy
  TigerSeman.initConf
  TigerSeman.okOp
  TigerSeman.ourOrder
  TigerSeman.trDec
  TigerSeman.transDecs
  TigerSeman.transExp
  TigerSeman.transTy
  TigerSeman.transVar
  TigerSeman.EstadoG{TigerSeman.G tEnv unique vEnv}
  TigerSeman.Manticore{TigerSeman.addTypos TigerSeman.getTipoFunV TigerSeman.getTipoT TigerSeman.getTipoValV TigerSeman.insertFunV TigerSeman.insertTipoT TigerSeman.insertVRO TigerSeman.insertValV TigerSeman.showTEnv TigerSeman.showVEnv TigerSeman.tiposIguales TigerSeman.ugen}
  TigerSeman.OurState
  TigerSeman.SEErrores{TigerSeman.DiffVal TigerSeman.Internal TigerSeman.NotFound}
module dependencies: PrintEnv TigerAbs TigerErrores TigerSres
                     TigerSymbol TigerTemp TigerTips
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      cond-0.4.1.1@cond-0.4.1.1-2yYcKtUJ6TG4fyL0AuCq0n
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      pretty-1.1.3.3@pretty-1.1.3.3
                      text-1.2.2.2@text-1.2.2.2-1cn50juu89QSL9QkUVcRY
                      transformers-0.5.2.0@transformers-0.5.2.0
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         text-1.2.2.2@text-1.2.2.2-1cn50juu89QSL9QkUVcRY:Data.Text
         text-1.2.2.2@text-1.2.2.2-1cn50juu89QSL9QkUVcRY:Data.Text.Show
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         text-1.2.2.2@text-1.2.2.2-1cn50juu89QSL9QkUVcRY:Data.Text
import  -/  PrintEnv 5b9e13297f6d2797f014e140a313479f
  exports: 422eeda738f34ddb8f325ca88c18486d
  renderEnv b7d4553ff04f46bf10d962f057fa171c
import  -/  TigerAbs 37f30c082077bd2ed6390df841315dcd
  exports: 3a90fdff097973025312591ea87ea06f
  ArrayExp 7c6004bec77ad7b20c1094cbfb154bea
  ArrayTy ac605d650b9f038b3baf05f5d5136090
  AssignExp 259c3fb661a9f3068a023131e417122e
  BreakExp d8f2335ad8f2e018b065cb1f3b7d29de
  CallExp 3777da78b97e94d0f97bf2ee04166d29
  Dec 49b0f3859ea1d6fd105d2ffa68df9b08
  DivideOp b11f0568dde983601121b21b858fe4c6
  EqOp 4d155e2488644b01de74aa03bfb42047
  Exp 49b0f3859ea1d6fd105d2ffa68df9b08
  FieldVar 6a02be9d8e8fdcee7fe9de68577dfe04
  ForExp ca7c606616d226aadf449f81ecae2b42
  GeOp d085bad1848560d001a1a1043db1ea82
  GtOp bcd6312d51bc5afdee786fac2aa9041f
  IfExp be5b47495f73bd344ea9ecaae1815c9f
  IntExp c475517749ea92dccfeadbe5a5cb056b
  LeOp 96fb60a26a72c047b4fdceb925164032
  LetExp f8a5d4844645c88eb477572b9e6a0639
  LtOp 770f8bd0082cc514cdbc57a5b3191082
  MinusOp d901418cbd30a052d7d14e03ea4b30e4
  NameTy 19e288b884627211374f02d41846d2a3
  NeqOp d817d9271f6c84a88ab4bb85635d1859
  NilExp a7086d1a30eaf3d31c12c607612008c4
  OpExp b4e8d3a2b6279e06f1722b41c2bf7eae
  Oper 9fb9192acfe569c0dd087872d17a6654
  PlusOp 2c5a1c9f2314937b0cd3a1672c800ee2
  Pos fb36cd90a03c4961c3dee20c15acb197
  RecordExp 1e2cafdad5d3455b18da8f6d557d9616
  RecordTy 1ef923a4373c74198d4dcf6c752ea012
  SeqExp bae16e417ec33004818db54293be1b0e
  SimpleVar e3c21d1c10c72c3d0838f9eea3d52970
  StringExp f2c50b5fd5066758b669c4ad8374b3df
  SubscriptVar df74264abbd5b42cd5439e839c11fbb1
  TimesOp 19131fa9813d112931811de7665acdb4
  Ty c8f49be9185ea6e5e9a3803802efa4d2
  TypeDec ee2eea1af4b0b6423e95b157773b27a3
  UnitExp 21d393030b855405e5a017383f3f8d06
  Var 49b0f3859ea1d6fd105d2ffa68df9b08
  VarDec ce4e43233e2faeafe81422e0ecf76419
  VarExp 5fee89112f87f39262195521d470e563
  WhileExp f00aa17c77f57abd2ad83be174b01d1d
import  -/  TigerErrores 0494bdc5e70a4f3b7e7f3cd2a8df36e7
  exports: 45cb60eadf487bb751c7c86293d60fdf
  Daemon 75602831f2e73bbe876cee9ba1b36693
  adder 4f800706bdeed60112516e9cbf6fe8eb
  diffval 0277689205459ae3abc26357333cae24
  internal aba20a74c059762137faa07a286cae0d
  notfound 603deea58ff4b8c69d50f4a4302da34c
import  -/  TigerSres 33465132037629b5624bf7af0c0f35e1
  exports: f650ce8d64a5712949a74f34d2b0c057
  EnvEntry b5ed20bed61e159b6677a93c0162173d
  FunEntry b1e4099fbeb71dcd3cf7aa47fe97a0fc
  Func b66ad6374dde3367a3b29ff6b77efb82
  ValEntry d742d99ccc2aa6815fa28cfb49535dbb
  Var d9f9b6d95b79a391283d0152e3d11084
import  -/  TigerSymbol 7f64bcc3e38a9378b34cbe06e8c0cb9e
  exports: 461431869c9d4f5bf206765437ddd561
  Symbol 9260f1c2b584be005733445adbd4fb0e
  addStr f5d3f7f24155a939439e34977f939adb
import  -/  TigerTips 09d0ed1e7b19dae6eb19e766e278976b
  exports: dcb87ec6f83998e086ed321a236f4c98
  RO 4c88ece55e6646282de691c7e1800c2a
  RW ab64912967b3171c92677f690780c04a
  RefRecord 2aca7f4e628ad0e378b389e93b680734
  TArray bb81d489f43cfe4f00dc442ad82da0fb
  TInt c8e847d898f8d432dee1373d20ee187a
  TNil 9f0f1b81f6a0b78565fb28a8f4a1dd50
  TRecord d2eaa6167a9843b8b4d66c3b825d2150
  TString ea696f7f003f3331420a1ec92ed1f175
  TUnit 5878ffe0327278d5a42513ac865ff842
  Tipo 7a9cbb36fc3301ae9285220ca7aef68d
  Unique 9abf1eb79fff2a55d19ebab8178f7d58
  intiposIguales 8a641fdb0b0b718d840dbc7e18c22b68
import  -/  base-4.9.1.0:Control.Monad a6784c5dab0d75c63dabec5a37843f98
import  -/  base-4.9.1.0:Data.Either 20b09ef8d0a5b74fdec011c40c1587f5
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:Data.OldList 27987919d8da2f92e3f472ca81f730f8
import  -/  base-4.9.1.0:Data.Traversable 556020d7cf3c4a34a774600512918a37
import  -/  base-4.9.1.0:Debug.Trace a9edf3aec504f4423d8ba829ab373a25
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Err 3bba35a16538d33d424682ce66876cdd
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.IO e4a64a8e3dce8616da54f0ee7104f7db
import  -/  cond-0.4.1.1@cond-0.4.1.1-2yYcKtUJ6TG4fyL0AuCq0n:Control.Conditional 50b46e7237e69486ed05e1e1810d82b7
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Graph db348d813df75aecf8e952806af948e3
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base d432f6875983131473086af8cb290590
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Strict 9d0c0962e53270a0a3fb5cb63723a381
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6:Control.Monad.Error.Class 635294424a2da8269902789f5c8bbe99
import  -/  mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6:Control.Monad.Except 3bb0e2598193c1ba00c9723945e93004
import  -/  mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6:Control.Monad.State 749dca8ca0e6625b32091d445bd92b01
import  -/  mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6:Control.Monad.State.Class 6d31234b0a911b56412061943d18b89e
import  -/  pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ 5fd6ee2fcb3f4a1e810ed36714963e44
import  -/  text-1.2.2.2@text-1.2.2.2-1cn50juu89QSL9QkUVcRY:Data.Text ef501398810147cc510ae8565b319c23
import  -/  text-1.2.2.2@text-1.2.2.2-1cn50juu89QSL9QkUVcRY:Data.Text.Internal e17bbef002f291b56b1f76642ff112d3
import  -/  text-1.2.2.2@text-1.2.2.2-1cn50juu89QSL9QkUVcRY:Data.Text.Show 4809e83bdd2e21888a17b80353f343b6
import  -/  transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.State.Lazy 371607e50dde46b5f4103b3ab334a497
e411ffa4203e5e6fbd9aa9cbcc16f744
  $dmtiposIguales ::
    TigerSeman.Manticore w =>
    TigerTips.Tipo -> TigerTips.Tipo -> w GHC.Types.Bool
  {- Arity: 3,
     Strictness: <S,U(1*U,1*U,A,A,A,A,A,A,C(U),A,A,C(C1(U)),A,A)><S,U><S,U>,
     Unfolding: InlineRule (0, True, False)
                (\ @ (w :: * -> *)
                   ($dManticore :: TigerSeman.Manticore w)
                   (eta :: TigerTips.Tipo)
                   (eta1 :: TigerTips.Tipo) ->
                 let {
                   $dMonad :: GHC.Base.Monad w
                   = TigerSeman.$p2Manticore @ w $dManticore
                 } in
                 let {
                   $dDaemon :: TigerErrores.Daemon w
                   = TigerSeman.$p1Manticore @ w $dManticore
                 } in
                 let {
                   fail :: GHC.Prim.Void# -> w GHC.Types.Bool {- Arity: 1 -}
                   = \ (ds :: GHC.Prim.Void#)[OneShot] ->
                     case eta1 of wild {
                       DEFAULT
                       -> GHC.Base.return
                            @ w
                            $dMonad
                            @ GHC.Types.Bool
                            (TigerTips.intiposIguales eta wild)
                       TigerTips.RefRecord s3
                       -> GHC.Base.$
                            @ 'GHC.Types.PtrRepLifted
                            @ TigerSymbol.Symbol
                            @ (w GHC.Types.Bool)
                            (TigerErrores.internal @ w $dDaemon @ GHC.Types.Bool)
                            (GHC.Base.$
                               @ 'GHC.Types.PtrRepLifted
                               @ GHC.Base.String
                               @ TigerSymbol.Symbol
                               Data.Text.pack
                               (GHC.Base.augment
                                  @ GHC.Types.Char
                                  (\ @ b
                                     (c :: GHC.Types.Char -> b -> b)[OneShot]
                                     (n :: b)[OneShot] ->
                                   GHC.CString.unpackFoldrCString#
                                     @ b
                                     "No son tipos iguales... 123+4"#
                                     c
                                     n)
                                  (GHC.Base.augment
                                     @ GHC.Types.Char
                                     (\ @ b
                                        (c :: GHC.Types.Char -> b -> b)[OneShot]
                                        (n :: b)[OneShot] ->
                                      GHC.Base.foldr
                                        @ GHC.Types.Char
                                        @ b
                                        c
                                        n
                                        (TigerTips.$fShowTipo_$cshow eta))
                                     (Data.Text.Show.$fShowText_$cshow s3)))) }
                 } in
                 case eta of wild {
                   DEFAULT -> fail GHC.Prim.void#
                   TigerTips.TNil
                   -> case eta1 of wild1 {
                        DEFAULT -> fail GHC.Prim.void#
                        TigerTips.RefRecord ds
                        -> GHC.Base.return @ w $dMonad @ GHC.Types.Bool GHC.Types.True }
                   TigerTips.TRecord ds u
                   -> case eta1 of wild1 {
                        DEFAULT -> fail GHC.Prim.void#
                        TigerTips.RefRecord s3
                        -> GHC.Base.>>=
                             @ w
                             $dMonad
                             @ TigerTips.Tipo
                             @ GHC.Types.Bool
                             (TigerSeman.getTipoT @ w $dManticore s3)
                             (\ (st :: TigerTips.Tipo) ->
                              case st of wild2 {
                                DEFAULT
                                -> GHC.Base.$
                                     @ 'GHC.Types.PtrRepLifted
                                     @ TigerSymbol.Symbol
                                     @ (w GHC.Types.Bool)
                                     (TigerErrores.internal @ w $dDaemon @ GHC.Types.Bool)
                                     (GHC.Base.$
                                        @ 'GHC.Types.PtrRepLifted
                                        @ GHC.Base.String
                                        @ TigerSymbol.Symbol
                                        Data.Text.pack
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString#
                                              @ b
                                              "No son tipos iguales... 123+2"#)))
                                TigerTips.TRecord ds1 u1
                                -> GHC.Base.return
                                     @ w
                                     $dMonad
                                     @ GHC.Types.Bool
                                     (GHC.Classes.eqInt u1 u)
                                TigerTips.RefRecord s'
                                -> TigerSeman.tiposIguales @ w $dManticore wild wild2 }) }
                   TigerTips.RefRecord s3
                   -> case eta1 of wild1 {
                        DEFAULT
                        -> GHC.Base.$
                             @ 'GHC.Types.PtrRepLifted
                             @ TigerSymbol.Symbol
                             @ (w GHC.Types.Bool)
                             (TigerErrores.internal @ w $dDaemon @ GHC.Types.Bool)
                             (GHC.Base.$
                                @ 'GHC.Types.PtrRepLifted
                                @ GHC.Base.String
                                @ TigerSymbol.Symbol
                                Data.Text.pack
                                (GHC.Base.build
                                   @ GHC.Types.Char
                                   (\ @ b ->
                                    GHC.CString.unpackFoldrCString#
                                      @ b
                                      "No son tipos iguales... 123+3"#)))
                        TigerTips.TNil
                        -> GHC.Base.return @ w $dMonad @ GHC.Types.Bool GHC.Types.True
                        TigerTips.TRecord ds u
                        -> GHC.Base.>>=
                             @ w
                             $dMonad
                             @ TigerTips.Tipo
                             @ GHC.Types.Bool
                             (TigerSeman.getTipoT @ w $dManticore s3)
                             (\ (st :: TigerTips.Tipo) ->
                              case st of wild2 {
                                DEFAULT
                                -> GHC.Base.$
                                     @ 'GHC.Types.PtrRepLifted
                                     @ TigerSymbol.Symbol
                                     @ (w GHC.Types.Bool)
                                     (TigerErrores.internal @ w $dDaemon @ GHC.Types.Bool)
                                     (GHC.Base.$
                                        @ 'GHC.Types.PtrRepLifted
                                        @ GHC.Base.String
                                        @ TigerSymbol.Symbol
                                        Data.Text.pack
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString#
                                              @ b
                                              "No son tipos iguales... 123+1"#)))
                                TigerTips.TRecord ds1 u1
                                -> GHC.Base.return
                                     @ w
                                     $dMonad
                                     @ GHC.Types.Bool
                                     (GHC.Classes.eqInt u1 u)
                                TigerTips.RefRecord s'
                                -> TigerSeman.tiposIguales @ w $dManticore wild2 wild1 })
                        TigerTips.RefRecord s'
                        -> GHC.Base.>>=
                             @ w
                             $dMonad
                             @ TigerTips.Tipo
                             @ GHC.Types.Bool
                             (TigerSeman.getTipoT @ w $dManticore s3)
                             (\ (s4 :: TigerTips.Tipo) ->
                              GHC.Base.>>=
                                @ w
                                $dMonad
                                @ TigerTips.Tipo
                                @ GHC.Types.Bool
                                (TigerSeman.getTipoT @ w $dManticore s')
                                (\ (s5 :: TigerTips.Tipo) ->
                                 TigerSeman.tiposIguales @ w $dManticore s4 s5)) } }) -}
34c9d376a577e101b72e82ca106e3166
  $fDaemonStateT :: TigerErrores.Daemon TigerSeman.OurState
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ TigerSeman.OurState
                  TigerSeman.$fDaemonStateT_$cderror
                  TigerSeman.$fDaemonStateT_$cadder
                  TigerSeman.$fDaemonStateT_$cnotfound
                  TigerSeman.$fDaemonStateT_$cdiffval
                  TigerSeman.$fDaemonStateT_$cinternal -}
34c9d376a577e101b72e82ca106e3166
  $fDaemonStateT1 ::
    TigerSeman.OurState a
    -> TigerSymbol.Symbol
    -> TigerSeman.EstadoG
    -> Data.Either.Either TigerSeman.SEErrores (a, TigerSeman.EstadoG)
  {- Arity: 3, Strictness: <C(S),1*C1(U)><L,1*U(U,U,U)><L,U>,
     Unfolding: (\ @ a
                   (w :: TigerSeman.OurState a)
                   (s3 :: TigerSymbol.Symbol)
                   (eta :: TigerSeman.EstadoG) ->
                 case w `cast`
                      (Control.Monad.Trans.State.Lazy.N:StateT[0]
                           <TigerSeman.EstadoG>_N
                           <Data.Either.Either TigerSeman.SEErrores>_R
                           <a>_N)
                        eta of wild {
                   Data.Either.Left l
                   -> case TigerSeman.errAppend l s3 of wild1 {
                        TigerSeman.NotFound t
                        -> Data.Either.Left
                             @ TigerSeman.SEErrores
                             @ (a, TigerSeman.EstadoG)
                             (TigerSeman.Internal
                                (TigerSymbol.addStr TigerSeman.$fDaemonStateT_g2 t))
                        TigerSeman.DiffVal t
                        -> Data.Either.Left
                             @ TigerSeman.SEErrores
                             @ (a, TigerSeman.EstadoG)
                             (TigerSeman.Internal
                                (TigerSymbol.addStr TigerSeman.$fDaemonStateT_g1 t))
                        TigerSeman.Internal t
                        -> Data.Either.Left
                             @ TigerSeman.SEErrores
                             @ (a, TigerSeman.EstadoG)
                             (TigerSeman.Internal
                                (TigerSymbol.addStr TigerSeman.$fDaemonStateT_g t)) }
                   Data.Either.Right r -> wild }) -}
34c9d376a577e101b72e82ca106e3166
  $fDaemonStateT2 ::
    TigerSymbol.Symbol
    -> TigerSeman.EstadoG
    -> Data.Either.Either TigerSeman.SEErrores (a, TigerSeman.EstadoG)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,A>m1,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (s3 :: TigerSymbol.Symbol) (eta :: TigerSeman.EstadoG) ->
                 Data.Either.Left
                   @ TigerSeman.SEErrores
                   @ (a, TigerSeman.EstadoG)
                   (TigerSeman.Internal s3)) -}
34c9d376a577e101b72e82ca106e3166
  $fDaemonStateT_$cadder ::
    TigerSeman.OurState a
    -> TigerSymbol.Symbol -> TigerSeman.OurState a
  {- Arity: 3, Strictness: <C(S),1*C1(U)><L,1*U(U,U,U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                TigerSeman.$fDaemonStateT1
                  `cast`
                (forall (a :: <*>_N).
                 <TigerSeman.OurState a>_R
                 ->_R <TigerSymbol.Symbol>_R
                 ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <TigerSeman.EstadoG>_N
                               <Data.Either.Either TigerSeman.SEErrores>_R
                               <a>_N)) -}
34c9d376a577e101b72e82ca106e3166
  $fDaemonStateT_$cderror ::
    TigerSymbol.Symbol -> TigerSeman.OurState a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,A>m1,
     Unfolding: InlineRule (0, True, True)
                TigerSeman.$fDaemonStateT2
                  `cast`
                (forall (a :: <*>_N).
                 <TigerSymbol.Symbol>_R
                 ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <TigerSeman.EstadoG>_N
                               <Data.Either.Either TigerSeman.SEErrores>_R
                               <a>_N)) -}
34c9d376a577e101b72e82ca106e3166
  $fDaemonStateT_$cdiffval ::
    TigerSymbol.Symbol -> TigerSeman.OurState a
  {- Arity: 1, Strictness: <L,1*U(U,U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (x :: TigerSymbol.Symbol) ->
                 let {
                   s3 :: TigerSymbol.Symbol
                   = TigerSymbol.addStr TigerSeman.$fDaemonStateT_g1 x
                 } in
                 (\ (eta :: TigerSeman.EstadoG) ->
                  Data.Either.Left
                    @ TigerSeman.SEErrores
                    @ (a, TigerSeman.EstadoG)
                    (TigerSeman.Internal s3))
                   `cast`
                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                           <TigerSeman.EstadoG>_N
                           <Data.Either.Either TigerSeman.SEErrores>_R
                           <a>_N))) -}
34c9d376a577e101b72e82ca106e3166
  $fDaemonStateT_$cinternal ::
    TigerSymbol.Symbol -> TigerSeman.OurState a
  {- Arity: 1, Strictness: <L,1*U(U,U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (x :: TigerSymbol.Symbol) ->
                 let {
                   s3 :: TigerSymbol.Symbol
                   = TigerSymbol.addStr TigerSeman.$fDaemonStateT_g x
                 } in
                 (\ (eta :: TigerSeman.EstadoG) ->
                  Data.Either.Left
                    @ TigerSeman.SEErrores
                    @ (a, TigerSeman.EstadoG)
                    (TigerSeman.Internal s3))
                   `cast`
                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                           <TigerSeman.EstadoG>_N
                           <Data.Either.Either TigerSeman.SEErrores>_R
                           <a>_N))) -}
34c9d376a577e101b72e82ca106e3166
  $fDaemonStateT_$cnotfound ::
    TigerSymbol.Symbol -> TigerSeman.OurState a
  {- Arity: 1, Strictness: <L,1*U(U,U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (x :: TigerSymbol.Symbol) ->
                 let {
                   s3 :: TigerSymbol.Symbol
                   = TigerSymbol.addStr TigerSeman.$fDaemonStateT_g2 x
                 } in
                 (\ (eta :: TigerSeman.EstadoG) ->
                  Data.Either.Left
                    @ TigerSeman.SEErrores
                    @ (a, TigerSeman.EstadoG)
                    (TigerSeman.Internal s3))
                   `cast`
                 (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                           <TigerSeman.EstadoG>_N
                           <Data.Either.Either TigerSeman.SEErrores>_R
                           <a>_N))) -}
86a70ab7b0d63a1be08e70f62a0213ab
  $fDaemonStateT_g :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Internal: "#) -}
d712bc8496c5e6853dcec8603a63d2ef
  $fDaemonStateT_g1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Different values: "#) -}
e3e04e9a4ec57bca4a85ad606818bd45
  $fDaemonStateT_g2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Not found:"#) -}
30ba9bb49d52754d32bb564107b313bf
  $fManticoreStateT :: TigerSeman.Manticore TigerSeman.OurState
  DFunId
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ TigerSeman.OurState
                  TigerSeman.$fDaemonStateT
                  TigerSeman.$fManticoreStateT_$cp2Manticore
                  TigerSeman.$fManticoreStateT_$cinsertValV
                  TigerSeman.$fManticoreStateT_$cinsertFunV
                  TigerSeman.$fManticoreStateT_$cinsertVRO
                  TigerSeman.$fManticoreStateT_$cinsertTipoT
                  TigerSeman.$fManticoreStateT_$cgetTipoFunV
                  TigerSeman.$fManticoreStateT_$cgetTipoValV
                  TigerSeman.$fManticoreStateT_$cgetTipoT
                  TigerSeman.$fManticoreStateT_$cshowVEnv
                  TigerSeman.$fManticoreStateT_$cshowTEnv
                  TigerSeman.$fManticoreStateT_$ctiposIguales
                  TigerSeman.$fManticoreStateT_$cugen
                  TigerSeman.$fManticoreStateT_$caddTypos -}
cdf93cc211418410a8aee1c17314c39b
  $fManticoreStateT1 ::
    TigerSeman.EstadoG
    -> Data.Either.Either
         TigerSeman.SEErrores (TigerTips.Unique, TigerSeman.EstadoG)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U(U),U,U)>m2,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: TigerSeman.EstadoG) ->
                 Data.Either.Right
                   @ TigerSeman.SEErrores
                   @ (TigerTips.Unique, TigerSeman.EstadoG)
                   (case w of wild { TigerSeman.G ds ds1 ds2 ->
                    case ds of wild1 { GHC.Types.I# x ->
                    GHC.Types.I# (GHC.Prim.+# x 1#) } },
                    case w of wild { TigerSeman.G ds ds1 ds2 ->
                    TigerSeman.G
                      (case ds of wild1 { GHC.Types.I# x ->
                       GHC.Types.I# (GHC.Prim.+# x 1#) })
                      ds1
                      ds2 })) -}
9a83ba6d4822dff1887ad6666bce51d8
  $fManticoreStateT10 ::
    TigerSymbol.Symbol
    -> TigerSeman.OurState a
    -> TigerSeman.EstadoG
    -> Data.Either.Either TigerSeman.SEErrores (a, TigerSeman.EstadoG)
  {- Arity: 3, Strictness: <L,1*U(U,U,U)><C(S),1*C1(U)><L,U(U,U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (s3 :: TigerSymbol.Symbol)
                   (w :: TigerSeman.OurState a)
                   (eta :: TigerSeman.EstadoG) ->
                 TigerSeman.$fManticoreStateT12
                   @ a
                   s3
                   TigerSeman.$fManticoreStateT11
                   w
                   eta) -}
a6a55bd8493594dcb280d499492565af
  $fManticoreStateT11 :: TigerTips.Tipo
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (TigerTips.TInt TigerTips.RO) -}
9cb58c90ba114ec41d07e7697f7599aa
  $fManticoreStateT12 ::
    TigerSymbol.Symbol
    -> TigerSres.ValEntry
    -> TigerSeman.OurState a
    -> TigerSeman.EstadoG
    -> Data.Either.Either TigerSeman.SEErrores (a, TigerSeman.EstadoG)
  {- Arity: 4,
     Strictness: <L,1*U(U,U,U)><L,U><C(S),1*C1(U)><L,U(U,U,U)>,
     Unfolding: (\ @ a
                   (s3 :: TigerSymbol.Symbol)
                   (ve :: TigerSres.ValEntry)
                   (w :: TigerSeman.OurState a)
                   (eta :: TigerSeman.EstadoG) ->
                 case w `cast`
                      (Control.Monad.Trans.State.Lazy.N:StateT[0]
                           <TigerSeman.EstadoG>_N
                           <Data.Either.Either TigerSeman.SEErrores>_R
                           <a>_N)
                        (case eta of wild { TigerSeman.G ds ds1 ds2 ->
                         TigerSeman.G
                           ds
                           (case s3 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                            TigerSeman.$w$sgo4
                              @ TigerSres.EnvEntry
                              ww1
                              ww2
                              ww3
                              (TigerSres.Var ve)
                              ds1 })
                           ds2 }) of wild {
                   Data.Either.Left l -> wild
                   Data.Either.Right r
                   -> Data.Either.Right
                        @ TigerSeman.SEErrores
                        @ (a, TigerSeman.EstadoG)
                        (case r of wild1 { (,) a1 s' -> a1 }, eta) }) -}
b59dc50f177cd38fa47a6dc013451daf
  $fManticoreStateT13 ::
    TigerSymbol.Symbol
    -> TigerSres.FunEntry
    -> TigerSeman.OurState a
    -> TigerSeman.EstadoG
    -> Data.Either.Either TigerSeman.SEErrores (a, TigerSeman.EstadoG)
  {- Arity: 4,
     Strictness: <L,1*U(U,U,U)><L,U><C(S),1*C1(U)><L,U(U,U,U)>,
     Unfolding: (\ @ a
                   (s3 :: TigerSymbol.Symbol)
                   (fe :: TigerSres.FunEntry)
                   (w :: TigerSeman.OurState a)
                   (eta :: TigerSeman.EstadoG) ->
                 case w `cast`
                      (Control.Monad.Trans.State.Lazy.N:StateT[0]
                           <TigerSeman.EstadoG>_N
                           <Data.Either.Either TigerSeman.SEErrores>_R
                           <a>_N)
                        (case eta of wild { TigerSeman.G ds ds1 ds2 ->
                         TigerSeman.G
                           ds
                           (case s3 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                            TigerSeman.$w$sgo4
                              @ TigerSres.EnvEntry
                              ww1
                              ww2
                              ww3
                              (TigerSres.Func fe)
                              ds1 })
                           ds2 }) of wild {
                   Data.Either.Left l -> wild
                   Data.Either.Right r
                   -> Data.Either.Right
                        @ TigerSeman.SEErrores
                        @ (a, TigerSeman.EstadoG)
                        (case r of wild1 { (,) a1 s' -> a1 }, eta) }) -}
158eefd45ae5b4a332f5aef88c27e2ad
  $fManticoreStateT14 ::
    GHC.Base.Functor
      (Control.Monad.Trans.State.Lazy.StateT
         s (Data.Either.Either TigerSeman.SEErrores))
  {- Unfolding: (\ @ s3 ->
                 Control.Monad.Trans.State.Lazy.$fFunctorStateT
                   @ (Data.Either.Either TigerSeman.SEErrores)
                   @ s3
                   (Data.Either.$fFunctorEither @ TigerSeman.SEErrores)) -}
1ca77332ccdfe5725bb3c6f2d4e2097f
  $fManticoreStateT2 ::
    TigerSeman.EstadoG
    -> Data.Either.Either
         TigerSeman.SEErrores (GHC.Types.IO (), TigerSeman.EstadoG)
  {- Arity: 1, Strictness: <L,U(U,U,U)>m2, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: TigerSeman.EstadoG) ->
                 case TigerSeman.$w$cshowVEnv w of ww { Unit# ww1 ->
                 Data.Either.Right
                   @ TigerSeman.SEErrores
                   @ (GHC.Types.IO (), TigerSeman.EstadoG)
                   ww1 }) -}
45eebeedc3c6fa14bf4fc1a65de5cd22
  $fManticoreStateT3 :: [GHC.Types.Char]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows6
                   (GHC.Types.[] @ GHC.Types.Char)) -}
7c357195944bb7acc4d6fb3b097813a4
  $fManticoreStateT4 ::
    TigerSymbol.Symbol
    -> TigerSeman.EstadoG
    -> Data.Either.Either
         TigerSeman.SEErrores (TigerTips.Tipo, TigerSeman.EstadoG)
  {- Arity: 2, Strictness: <S,U(U,U,U)><S(LLS),1*U(U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: TigerSymbol.Symbol) (w1 :: TigerSeman.EstadoG) ->
                 case w of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 case w1 of ww4 { TigerSeman.G ww5 ww6 ww7 ->
                 TigerSeman.$w$cgetTipoT ww1 ww2 ww3 ww5 ww6 ww7 } }) -}
826986ca85dca425b9f30313d655591d
  $fManticoreStateT5 ::
    TigerSymbol.Symbol
    -> TigerSeman.EstadoG
    -> Data.Either.Either
         TigerSeman.SEErrores (TigerSres.ValEntry, TigerSeman.EstadoG)
  {- Arity: 2, Strictness: <S,U(U,U,U)><S(LSL),1*U(U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: TigerSymbol.Symbol) (w1 :: TigerSeman.EstadoG) ->
                 case w of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 case w1 of ww4 { TigerSeman.G ww5 ww6 ww7 ->
                 TigerSeman.$w$cgetTipoValV ww1 ww2 ww3 ww5 ww6 ww7 } }) -}
dfd6ddd8e303371d4c2f7ce005c7e9f7
  $fManticoreStateT6 ::
    Control.Monad.Trans.State.Lazy.StateT
      TigerSeman.EstadoG
      (Data.Either.Either TigerSeman.SEErrores)
      TigerSres.ValEntry
  {- Strictness: x -}
f1aa2022bfc48165f3e930e45309b0b6
  $fManticoreStateT7 ::
    TigerSymbol.Symbol
    -> TigerSeman.EstadoG
    -> Data.Either.Either
         TigerSeman.SEErrores (TigerSres.FunEntry, TigerSeman.EstadoG)
  {- Arity: 2, Strictness: <S,U(U,U,U)><S(LSL),1*U(U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: TigerSymbol.Symbol) (w1 :: TigerSeman.EstadoG) ->
                 case w of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 case w1 of ww4 { TigerSeman.G ww5 ww6 ww7 ->
                 TigerSeman.$w$cgetTipoFunV ww1 ww2 ww3 ww5 ww6 ww7 } }) -}
0dad5c2fdc84f38d6af236b62fa9d6a6
  $fManticoreStateT8 ::
    Control.Monad.Trans.State.Lazy.StateT
      TigerSeman.EstadoG
      (Data.Either.Either TigerSeman.SEErrores)
      TigerSres.FunEntry
  {- Strictness: x -}
4d331a03cd55049275f6b44009c322d1
  $fManticoreStateT9 ::
    TigerSymbol.Symbol
    -> TigerTips.Tipo
    -> TigerSeman.OurState a
    -> TigerSeman.EstadoG
    -> Data.Either.Either TigerSeman.SEErrores (a, TigerSeman.EstadoG)
  {- Arity: 4,
     Strictness: <L,1*U(U,U,U)><L,1*U><C(S),1*C1(U)><L,U(U,U,U)>,
     Unfolding: (\ @ a
                   (s3 :: TigerSymbol.Symbol)
                   (ty :: TigerTips.Tipo)
                   (w :: TigerSeman.OurState a)
                   (eta :: TigerSeman.EstadoG) ->
                 case w `cast`
                      (Control.Monad.Trans.State.Lazy.N:StateT[0]
                           <TigerSeman.EstadoG>_N
                           <Data.Either.Either TigerSeman.SEErrores>_R
                           <a>_N)
                        (case eta of wild { TigerSeman.G ds ds1 ds2 ->
                         TigerSeman.G
                           ds
                           ds1
                           (TigerSeman.$fManticoreStateT_$sgo4
                              @ TigerTips.Tipo
                              s3
                              ty
                              ds2) }) of wild {
                   Data.Either.Left l -> wild
                   Data.Either.Right r
                   -> Data.Either.Right
                        @ TigerSeman.SEErrores
                        @ (a, TigerSeman.EstadoG)
                        (case r of wild1 { (,) a1 s' -> a1 }, eta) }) -}
26c62d4da9b163e84d68534eedb851bd
  $fManticoreStateT_$caddTypos ::
    [(TigerSymbol.Symbol, TigerAbs.Ty, TigerAbs.Pos)]
    -> TigerSeman.OurState ()
  {- Strictness: x -}
f288f08d09950010fdef38efe3c5eabd
  $fManticoreStateT_$cgetTipoFunV ::
    TigerSymbol.Symbol -> TigerSeman.OurState TigerSres.FunEntry
  {- Arity: 2, Strictness: <S,U(U,U,U)><S(LSL),1*U(U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                TigerSeman.$fManticoreStateT7
                  `cast`
                (<TigerSymbol.Symbol>_R
                 ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <TigerSeman.EstadoG>_N
                               <Data.Either.Either TigerSeman.SEErrores>_R
                               <TigerSres.FunEntry>_N)) -}
682a10020a8afd7f678e08e6df031cab
  $fManticoreStateT_$cgetTipoT ::
    TigerSymbol.Symbol -> TigerSeman.OurState TigerTips.Tipo
  {- Arity: 2, Strictness: <S,U(U,U,U)><S(LLS),1*U(U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                TigerSeman.$fManticoreStateT4
                  `cast`
                (<TigerSymbol.Symbol>_R
                 ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <TigerSeman.EstadoG>_N
                               <Data.Either.Either TigerSeman.SEErrores>_R
                               <TigerTips.Tipo>_N)) -}
cbbd9d222fb3cbcc2f75a06ae058f593
  $fManticoreStateT_$cgetTipoValV ::
    TigerSymbol.Symbol -> TigerSeman.OurState TigerSres.ValEntry
  {- Arity: 2, Strictness: <S,U(U,U,U)><S(LSL),1*U(U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                TigerSeman.$fManticoreStateT5
                  `cast`
                (<TigerSymbol.Symbol>_R
                 ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <TigerSeman.EstadoG>_N
                               <Data.Either.Either TigerSeman.SEErrores>_R
                               <TigerSres.ValEntry>_N)) -}
6622663a0925867a9b1f2d1dc4c0b6db
  $fManticoreStateT_$cinsertFunV ::
    TigerSymbol.Symbol
    -> TigerSres.FunEntry
    -> TigerSeman.OurState a
    -> TigerSeman.OurState a
  {- Arity: 4,
     Strictness: <L,1*U(U,U,U)><L,U><C(S),1*C1(U)><L,U(U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                TigerSeman.$fManticoreStateT13
                  `cast`
                (forall (a :: <*>_N).
                 <TigerSymbol.Symbol>_R
                 ->_R <TigerSres.FunEntry>_R
                 ->_R <TigerSeman.OurState a>_R
                 ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <TigerSeman.EstadoG>_N
                               <Data.Either.Either TigerSeman.SEErrores>_R
                               <a>_N)) -}
be43fb0fed0b61e9cb366c83813eb4bc
  $fManticoreStateT_$cinsertTipoT ::
    TigerSymbol.Symbol
    -> TigerTips.Tipo -> TigerSeman.OurState a -> TigerSeman.OurState a
  {- Arity: 4,
     Strictness: <L,1*U(U,U,U)><L,1*U><C(S),1*C1(U)><L,U(U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                TigerSeman.$fManticoreStateT9
                  `cast`
                (forall (a :: <*>_N).
                 <TigerSymbol.Symbol>_R
                 ->_R <TigerTips.Tipo>_R
                 ->_R <TigerSeman.OurState a>_R
                 ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <TigerSeman.EstadoG>_N
                               <Data.Either.Either TigerSeman.SEErrores>_R
                               <a>_N)) -}
d3ab3b334e0f909b3f2897ae582fdcc5
  $fManticoreStateT_$cinsertVRO ::
    TigerSymbol.Symbol
    -> TigerSeman.OurState a -> TigerSeman.OurState a
  {- Arity: 3, Strictness: <L,1*U(U,U,U)><C(S),1*C1(U)><L,U(U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                TigerSeman.$fManticoreStateT10
                  `cast`
                (forall (a :: <*>_N).
                 <TigerSymbol.Symbol>_R
                 ->_R <TigerSeman.OurState a>_R
                 ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <TigerSeman.EstadoG>_N
                               <Data.Either.Either TigerSeman.SEErrores>_R
                               <a>_N)) -}
b3cff5f3076323a1ef7a930a38a48412
  $fManticoreStateT_$cinsertValV ::
    TigerSymbol.Symbol
    -> TigerSres.ValEntry
    -> TigerSeman.OurState a
    -> TigerSeman.OurState a
  {- Arity: 4,
     Strictness: <L,1*U(U,U,U)><L,U><C(S),1*C1(U)><L,U(U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                TigerSeman.$fManticoreStateT12
                  `cast`
                (forall (a :: <*>_N).
                 <TigerSymbol.Symbol>_R
                 ->_R <TigerSres.ValEntry>_R
                 ->_R <TigerSeman.OurState a>_R
                 ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <TigerSeman.EstadoG>_N
                               <Data.Either.Either TigerSeman.SEErrores>_R
                               <a>_N)) -}
f99f1baff06249dc2c0d587683f4b087
  $fManticoreStateT_$cp2Manticore ::
    GHC.Base.Monad TigerSeman.OurState
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (TigerSeman.$fManticoreStateT_$s$fMonadStateT
                   @ TigerSeman.EstadoG) -}
2ef7ba39b6764d5aa394fc4f6266f8f4
  $fManticoreStateT_$cshowTEnv :: TigerSeman.OurState ()
  {- Strictness: x -}
1e80dc40d2883b515c71425e554057ba
  $fManticoreStateT_$cshowVEnv ::
    TigerSeman.OurState (GHC.Types.IO ())
  {- Arity: 1, Strictness: <L,U(U,U,U)>m2,
     Unfolding: InlineRule (0, True, True)
                TigerSeman.$fManticoreStateT2
                  `cast`
                (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                          <TigerSeman.EstadoG>_N
                          <Data.Either.Either TigerSeman.SEErrores>_R
                          <GHC.Types.IO ()>_N)) -}
ed7b39c4d635da0ffc8d184a791dfe22
  $fManticoreStateT_$ctiposIguales ::
    TigerTips.Tipo
    -> TigerTips.Tipo -> TigerSeman.OurState GHC.Types.Bool
  {- Arity: 2, Strictness: <S,U><S,U> -}
ecc8fb233e7991f75184d742fd283762
  $fManticoreStateT_$cugen :: TigerSeman.OurState TigerTips.Unique
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U(U),U,U)>m2,
     Unfolding: InlineRule (0, True, True)
                TigerSeman.$fManticoreStateT1
                  `cast`
                (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                          <TigerSeman.EstadoG>_N
                          <Data.Either.Either TigerSeman.SEErrores>_R
                          <TigerTips.Unique>_N)) -}
b354c5f10b1bc76a286714122b665d6b
  $fManticoreStateT_$dFunctor ::
    GHC.Base.Functor (Data.Either.Either TigerSeman.SEErrores)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (Data.Either.$fFunctorEither @ TigerSeman.SEErrores) -}
648be12041321d9f0bfdd03c12f375ea
  $fManticoreStateT_$s$fApplicativeStateT ::
    GHC.Base.Applicative
      (Control.Monad.Trans.State.Lazy.StateT
         s (Data.Either.Either TigerSeman.SEErrores))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ s3.
                  @ (Control.Monad.Trans.State.Lazy.StateT
                       s3 (Data.Either.Either TigerSeman.SEErrores))
                  (TigerSeman.$fManticoreStateT14 @ s3)
                  (TigerSeman.$fManticoreStateT_$s$fApplicativeStateT_$cpure @ s3)
                  (TigerSeman.$fManticoreStateT_$s$fApplicativeStateT_$c<*> @ s3)
                  (Control.Monad.Trans.State.Lazy.$fApplicativeStateT_$c*>
                     @ (Data.Either.Either TigerSeman.SEErrores)
                     @ s3
                     TigerSeman.$fManticoreStateT_$dFunctor
                     (Data.Either.$fMonadEither @ TigerSeman.SEErrores))
                  (Control.Monad.Trans.State.Lazy.$fApplicativeStateT_$c<*
                     @ (Data.Either.Either TigerSeman.SEErrores)
                     @ s3
                     TigerSeman.$fManticoreStateT_$dFunctor
                     (Data.Either.$fMonadEither @ TigerSeman.SEErrores)) -}
1a8249c6eadde2a1fe946ad57ee4f91d
  $fManticoreStateT_$s$fApplicativeStateT_$c<*> ::
    Control.Monad.Trans.State.Lazy.StateT
      s (Data.Either.Either TigerSeman.SEErrores) (a -> b)
    -> Control.Monad.Trans.State.Lazy.StateT
         s (Data.Either.Either TigerSeman.SEErrores) a
    -> Control.Monad.Trans.State.Lazy.StateT
         s (Data.Either.Either TigerSeman.SEErrores) b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*C1(U)><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s3
                   @ a
                   @ b
                   (ds :: Control.Monad.Trans.State.Lazy.StateT
                            s3 (Data.Either.Either TigerSeman.SEErrores) (a -> b))
                   (ds1 :: Control.Monad.Trans.State.Lazy.StateT
                             s3 (Data.Either.Either TigerSeman.SEErrores) a) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (s3 -> Data.Either.Either TigerSeman.SEErrores (b, s3))
                   @ (Control.Monad.Trans.State.Lazy.StateT
                        s3 (Data.Either.Either TigerSeman.SEErrores) b)
                   (\ (tpl :: s3
                              -> Data.Either.Either TigerSeman.SEErrores (b, s3)) ->
                    tpl)
                     `cast`
                   (<s3 -> Data.Either.Either TigerSeman.SEErrores (b, s3)>_R
                    ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                  <s3>_N <Data.Either.Either TigerSeman.SEErrores>_R <b>_N))
                   (\ (s4 :: s3) ->
                    Data.Either.$fMonadEither_$c>>=
                      @ TigerSeman.SEErrores
                      @ (a -> b, s3)
                      @ (b, s3)
                      (ds
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <s3>_N <Data.Either.Either TigerSeman.SEErrores>_R <a -> b>_N)
                         s4)
                      (\ (ds2 :: (a -> b, s3))[OneShot] ->
                       Data.Either.$fMonadEither_$c>>=
                         @ TigerSeman.SEErrores
                         @ (a, s3)
                         @ (b, s3)
                         (ds1
                            `cast`
                          (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <s3>_N <Data.Either.Either TigerSeman.SEErrores>_R <a>_N)
                            (case ds2 of wild { (,) f s' -> s' }))
                         (\ (ds3 :: (a, s3))[OneShot] ->
                          Data.Either.$fMonadEither_$creturn
                            @ TigerSeman.SEErrores
                            @ (b, s3)
                            (case ds2 of wild { (,) f s' ->
                             f (case ds3 of wild1 { (,) x s'' -> x }) },
                             case ds3 of wild { (,) x s'' -> s'' }))))) -}
54a9ce3d12e4ac49ef011000ee9ce41d
  $fManticoreStateT_$s$fApplicativeStateT_$cpure ::
    a
    -> Control.Monad.Trans.State.Lazy.StateT
         s (Data.Either.Either TigerSeman.SEErrores) a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m2,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ s3 @ a (a1 :: a) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (s3 -> Data.Either.Either TigerSeman.SEErrores (a, s3))
                   @ (Control.Monad.Trans.State.Lazy.StateT
                        s3 (Data.Either.Either TigerSeman.SEErrores) a)
                   (\ (tpl :: s3
                              -> Data.Either.Either TigerSeman.SEErrores (a, s3)) ->
                    tpl)
                     `cast`
                   (<s3 -> Data.Either.Either TigerSeman.SEErrores (a, s3)>_R
                    ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                  <s3>_N <Data.Either.Either TigerSeman.SEErrores>_R <a>_N))
                   (\ (s4 :: s3) ->
                    Data.Either.$fMonadEither_$creturn
                      @ TigerSeman.SEErrores
                      @ (a, s3)
                      (a1, s4))) -}
7372a950069e22cfd7562d6c21213562
  $fManticoreStateT_$s$fMonadStateT ::
    GHC.Base.Monad
      (Control.Monad.Trans.State.Lazy.StateT
         s (Data.Either.Either TigerSeman.SEErrores))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ s3.
                  @ (Control.Monad.Trans.State.Lazy.StateT
                       s3 (Data.Either.Either TigerSeman.SEErrores))
                  (TigerSeman.$fManticoreStateT_$s$fMonadStateT_$cp1Monad @ s3)
                  (TigerSeman.$fManticoreStateT_$s$fMonadStateT_$c>>= @ s3)
                  (TigerSeman.$fManticoreStateT_$s$fMonadStateT_$c>> @ s3)
                  (Control.Monad.Trans.State.Lazy.$fMonadStateT_$creturn
                     @ (Data.Either.Either TigerSeman.SEErrores)
                     @ s3
                     (Data.Either.$fMonadEither @ TigerSeman.SEErrores))
                  (TigerSeman.$fManticoreStateT_$s$fMonadStateT_$cfail @ s3) -}
f84813d7eddc43b5c117858e068e1061
  $fManticoreStateT_$s$fMonadStateT_$c>> ::
    Control.Monad.Trans.State.Lazy.StateT
      s (Data.Either.Either TigerSeman.SEErrores) a
    -> Control.Monad.Trans.State.Lazy.StateT
         s (Data.Either.Either TigerSeman.SEErrores) b
    -> Control.Monad.Trans.State.Lazy.StateT
         s (Data.Either.Either TigerSeman.SEErrores) b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*C1(U)><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s3
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.State.Lazy.StateT
                            s3 (Data.Either.Either TigerSeman.SEErrores) a)
                   (k :: Control.Monad.Trans.State.Lazy.StateT
                           s3 (Data.Either.Either TigerSeman.SEErrores) b) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (s3 -> Data.Either.Either TigerSeman.SEErrores (b, s3))
                   @ (Control.Monad.Trans.State.Lazy.StateT
                        s3 (Data.Either.Either TigerSeman.SEErrores) b)
                   (\ (tpl :: s3
                              -> Data.Either.Either TigerSeman.SEErrores (b, s3)) ->
                    tpl)
                     `cast`
                   (<s3 -> Data.Either.Either TigerSeman.SEErrores (b, s3)>_R
                    ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                  <s3>_N <Data.Either.Either TigerSeman.SEErrores>_R <b>_N))
                   (\ (s4 :: s3) ->
                    Data.Either.$fMonadEither_$c>>=
                      @ TigerSeman.SEErrores
                      @ (a, s3)
                      @ (b, s3)
                      (Control.Monad.Trans.State.Lazy.runStateT
                         @ s3
                         @ (Data.Either.Either TigerSeman.SEErrores)
                         @ a
                         m1
                         s4)
                      (\ (ds :: (a, s3))[OneShot] ->
                       Control.Monad.Trans.State.Lazy.runStateT
                         @ s3
                         @ (Data.Either.Either TigerSeman.SEErrores)
                         @ b
                         k
                         (case ds of wild { (,) a1 s' -> s' })))) -}
d4f59a4e6fb99b2a858c82abad9f1d8b
  $fManticoreStateT_$s$fMonadStateT_$c>>= ::
    Control.Monad.Trans.State.Lazy.StateT
      s (Data.Either.Either TigerSeman.SEErrores) a
    -> (a
        -> Control.Monad.Trans.State.Lazy.StateT
             s (Data.Either.Either TigerSeman.SEErrores) b)
    -> Control.Monad.Trans.State.Lazy.StateT
         s (Data.Either.Either TigerSeman.SEErrores) b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*C1(C1(U))><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s3
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.State.Lazy.StateT
                            s3 (Data.Either.Either TigerSeman.SEErrores) a)
                   (k :: a
                         -> Control.Monad.Trans.State.Lazy.StateT
                              s3 (Data.Either.Either TigerSeman.SEErrores) b) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (s3 -> Data.Either.Either TigerSeman.SEErrores (b, s3))
                   @ (Control.Monad.Trans.State.Lazy.StateT
                        s3 (Data.Either.Either TigerSeman.SEErrores) b)
                   (\ (tpl :: s3
                              -> Data.Either.Either TigerSeman.SEErrores (b, s3)) ->
                    tpl)
                     `cast`
                   (<s3 -> Data.Either.Either TigerSeman.SEErrores (b, s3)>_R
                    ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                  <s3>_N <Data.Either.Either TigerSeman.SEErrores>_R <b>_N))
                   (\ (s4 :: s3) ->
                    Data.Either.$fMonadEither_$c>>=
                      @ TigerSeman.SEErrores
                      @ (a, s3)
                      @ (b, s3)
                      (Control.Monad.Trans.State.Lazy.runStateT
                         @ s3
                         @ (Data.Either.Either TigerSeman.SEErrores)
                         @ a
                         m1
                         s4)
                      (\ (ds :: (a, s3))[OneShot] ->
                       Control.Monad.Trans.State.Lazy.runStateT
                         @ s3
                         @ (Data.Either.Either TigerSeman.SEErrores)
                         @ b
                         (k (case ds of wild { (,) a1 s' -> a1 }))
                         (case ds of wild { (,) a1 s' -> s' })))) -}
5aabe178561790745db2e5738477ad27
  $fManticoreStateT_$s$fMonadStateT_$cfail ::
    GHC.Base.String
    -> Control.Monad.Trans.State.Lazy.StateT
         s (Data.Either.Either TigerSeman.SEErrores) a
  {- Arity: 2, Strictness: <B,U><B,A>x, Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ s3 @ a (str :: GHC.Base.String) ->
                 GHC.Base.$
                   @ 'GHC.Types.PtrRepLifted
                   @ (s3 -> Data.Either.Either TigerSeman.SEErrores (a, s3))
                   @ (Control.Monad.Trans.State.Lazy.StateT
                        s3 (Data.Either.Either TigerSeman.SEErrores) a)
                   (\ (tpl :: s3
                              -> Data.Either.Either TigerSeman.SEErrores (a, s3)) ->
                    tpl)
                     `cast`
                   (<s3 -> Data.Either.Either TigerSeman.SEErrores (a, s3)>_R
                    ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                  <s3>_N <Data.Either.Either TigerSeman.SEErrores>_R <a>_N))
                   (\ (ds :: s3) ->
                    Data.Either.$fMonadEither_$cfail
                      @ TigerSeman.SEErrores
                      @ (a, s3)
                      str)) -}
4b0d82039b769da34575653ff03541b8
  $fManticoreStateT_$s$fMonadStateT_$cp1Monad ::
    GHC.Base.Applicative
      (Control.Monad.Trans.State.Lazy.StateT
         s (Data.Either.Either TigerSeman.SEErrores))
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                TigerSeman.$fManticoreStateT_$s$fApplicativeStateT -}
b22d085f747c77a4461f3ae8fc0ca873
  $fManticoreStateT_$sgo4 ::
    Data.Text.Internal.Text
    -> a1
    -> Data.Map.Base.Map Data.Text.Internal.Text a1
    -> Data.Map.Base.Map Data.Text.Internal.Text a1
  {- Arity: 3, Strictness: <S,1*U(U,U,U)><S,1*U><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a1
                   (w :: Data.Text.Internal.Text)
                   (w1 :: a1)
                   (w2 :: Data.Map.Base.Map Data.Text.Internal.Text a1) ->
                 case w of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 TigerSeman.$w$sgo4 @ a1 ww1 ww2 ww3 w1 w2 }) -}
583afbff5e8ec9b21d8ef889c409eab7
  $fManticoreStateT_go10 ::
    [GHC.Types.Char]
    -> Data.Map.Base.Map Data.Text.Internal.Text TigerSres.EnvEntry
    -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
34c9d376a577e101b72e82ca106e3166
  $fShowEstadoG :: GHC.Show.Show TigerSeman.EstadoG
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ TigerSeman.EstadoG
                  TigerSeman.$fShowEstadoG_$cshowsPrec
                  TigerSeman.$fShowEstadoG_$cshow
                  TigerSeman.$fShowEstadoG_$cshowList -}
34c9d376a577e101b72e82ca106e3166
  $fShowEstadoG1 :: TigerSeman.EstadoG -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: TigerSeman.EstadoG) ->
                 case w of ww { TigerSeman.G ww1 ww2 ww3 ->
                 TigerSeman.$w$cshowsPrec 0# ww1 ww2 ww3 }) -}
25992b36ebe33b57a51880fc348d62ce
  $fShowEstadoG2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
fa7fb915d29fe476d28459d4b9e64fc2
  $fShowEstadoG3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "tEnv = "#) -}
fa36dd6e96799bcf608659afb00a99c5
  $fShowEstadoG4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "vEnv = "#) -}
871a90f460ea8489c20bbe89cd69fadc
  $fShowEstadoG5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
129799a342cf9f89812c726d83d1a181
  $fShowEstadoG6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "unique = "#) -}
eb92f72a25bbddf0b7e4d8ca5bc6a181
  $fShowEstadoG7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "G {"#) -}
34c9d376a577e101b72e82ca106e3166
  $fShowEstadoG_$cshow :: TigerSeman.EstadoG -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U(U),1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: TigerSeman.EstadoG) ->
                 TigerSeman.$fShowEstadoG_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
34c9d376a577e101b72e82ca106e3166
  $fShowEstadoG_$cshowList :: [TigerSeman.EstadoG] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ TigerSeman.EstadoG
                   TigerSeman.$fShowEstadoG1) -}
34c9d376a577e101b72e82ca106e3166
  $fShowEstadoG_$cshowsPrec ::
    GHC.Types.Int -> TigerSeman.EstadoG -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(U(U),1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: TigerSeman.EstadoG) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { TigerSeman.G ww3 ww4 ww5 ->
                 TigerSeman.$w$cshowsPrec ww1 ww3 ww4 ww5 } }) -}
4523d201572e6cb81553761759f96589
  $fShowSEErrores :: GHC.Show.Show TigerSeman.SEErrores
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ TigerSeman.SEErrores
                  TigerSeman.$fShowSEErrores_$cshowsPrec
                  TigerSeman.$fShowSEErrores_$cshow
                  TigerSeman.$fShowSEErrores_$cshowList -}
4523d201572e6cb81553761759f96589
  $fShowSEErrores1 :: TigerSeman.SEErrores -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: TigerSeman.SEErrores)
                   (w1 :: GHC.Base.String) ->
                 TigerSeman.$w$cshowsPrec1 0# w w1) -}
8a310ef224fcd864a6f82b6aac26ed69
  $fShowSEErrores2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Internal "#) -}
d33a5e5e6669a6c6830b0f5c1b32054e
  $fShowSEErrores3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DiffVal "#) -}
77baf9a5f7ceba64bcfe075232011458
  $fShowSEErrores4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NotFound "#) -}
4523d201572e6cb81553761759f96589
  $fShowSEErrores_$cshow :: TigerSeman.SEErrores -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: TigerSeman.SEErrores) ->
                 TigerSeman.$fShowSEErrores_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
4523d201572e6cb81553761759f96589
  $fShowSEErrores_$cshowList ::
    [TigerSeman.SEErrores] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ TigerSeman.SEErrores
                   TigerSeman.$fShowSEErrores1) -}
4523d201572e6cb81553761759f96589
  $fShowSEErrores_$cshowsPrec ::
    GHC.Types.Int -> TigerSeman.SEErrores -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: TigerSeman.SEErrores)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 TigerSeman.$w$cshowsPrec1 ww1 w1 w2 }) -}
86b7df73d5ab126999bdcd4e731ac716
  $sfromList ::
    [(Data.Text.Internal.Text, a)]
    -> Data.Map.Base.Map Data.Text.Internal.Text a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [(Data.Text.Internal.Text, a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Base.Tip @ Data.Text.Internal.Text @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case x of x1 { DEFAULT ->
                           case kx of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                           Data.Map.Base.Bin
                             @ Data.Text.Internal.Text
                             @ a
                             1#
                             dt
                             x1
                             (Data.Map.Base.Tip @ Data.Text.Internal.Text @ a)
                             (Data.Map.Base.Tip @ Data.Text.Internal.Text @ a) } }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                           case ky of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild4 {
                             DEFAULT
                             -> case x of x0 { DEFAULT ->
                                TigerSeman.$sfromList1
                                  @ a
                                  (Data.Map.Base.Bin
                                     @ Data.Text.Internal.Text
                                     @ a
                                     1#
                                     ww
                                     x0
                                     (Data.Map.Base.Tip @ Data.Text.Internal.Text @ a)
                                     (Data.Map.Base.Tip @ Data.Text.Internal.Text @ a))
                                  wild2 }
                             GHC.Types.LT
                             -> case x of x0 { DEFAULT ->
                                TigerSeman.$wpoly_go4
                                  @ a
                                  1#
                                  (Data.Map.Base.Bin
                                     @ Data.Text.Internal.Text
                                     @ a
                                     1#
                                     ww
                                     x0
                                     (Data.Map.Base.Tip @ Data.Text.Internal.Text @ a)
                                     (Data.Map.Base.Tip @ Data.Text.Internal.Text @ a))
                                  wild2 } } } } } } } }) -}
69c3e846015cd6bdc34d94e957c1011a
  $sfromList1 ::
    Data.Map.Base.Map Data.Text.Internal.Text a1
    -> [(Data.Text.Internal.Text, a1)]
    -> Data.Map.Base.Map Data.Text.Internal.Text a1
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
bfe934eae17514d64b1f059ce2c2199e
  $tc'C:Manticore :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8260101503217447533##
                   1533813091585985651##
                   TigerSeman.$trModule
                   TigerSeman.$tc'C:Manticore1) -}
d6509eb016523efadb9a1594bda1b1bc
  $tc'C:Manticore1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C:Manticore"#) -}
27f4d4137641cd79ed8b2a00beee230a
  $tc'DiffVal :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18059015792360845089##
                   7575915315478504769##
                   TigerSeman.$trModule
                   TigerSeman.$tc'DiffVal1) -}
553bb87eff7488fa08a7e0ac6a29d4f4
  $tc'DiffVal1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'DiffVal"#) -}
90723e1393f2734e474c9e22dcc4c63d
  $tc'G :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2833661977141889632##
                   7937731691145369459##
                   TigerSeman.$trModule
                   TigerSeman.$tc'G1) -}
44259743330b67e004e0affd3dbf4667
  $tc'G1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'G"#) -}
12e1f5409095242e76c06874c987705d
  $tc'Internal :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9241654203842053686##
                   6266641757545545537##
                   TigerSeman.$trModule
                   TigerSeman.$tc'Internal1) -}
3fa744bccf422f4f8901c6b361edba82
  $tc'Internal1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Internal"#) -}
8d9a04f7c83b107a40e5514ba804c96b
  $tc'NotFound :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8506119949341763738##
                   3029133470143125536##
                   TigerSeman.$trModule
                   TigerSeman.$tc'NotFound1) -}
9de44b111881db857e8f6d2157e389a2
  $tc'NotFound1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'NotFound"#) -}
f266a3713c446ff89a420883cac5fb8f
  $tcEstadoG :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11559018677636708758##
                   6502738251490384432##
                   TigerSeman.$trModule
                   TigerSeman.$tcEstadoG1) -}
71dbc8f76d0f48c35d6ecd6cf0649f9f
  $tcEstadoG1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "EstadoG"#) -}
a33f62b495821bbef820c8a165a20b0e
  $tcManticore :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2088831987521326793##
                   1233435643970577259##
                   TigerSeman.$trModule
                   TigerSeman.$tcManticore1) -}
489a2ef7f729cffd22638ecf5b899072
  $tcManticore1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Manticore"#) -}
8381c1fee8f9e6c854531c6224484d96
  $tcSEErrores :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11197353687848426345##
                   3501564534318179588##
                   TigerSeman.$trModule
                   TigerSeman.$tcSEErrores1) -}
9ccf0276565acc33eca9e8393b975ced
  $tcSEErrores1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "SEErrores"#) -}
1d5072ec3e684dffe40b93560843d66f
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   TigerSeman.$trModule2
                   TigerSeman.$trModule1) -}
a951cc879525f37579ceaddb0aba788a
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "TigerSeman"#) -}
1fa2d9c0ca311829c974b91e8ed74043
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "HaskTiger-0.1.0.0-1NjWJIneMSYKOEJS7DxzEs"#) -}
d79d3eccd594984dd63bac9b93671ab9
  $w$cgetTipoFunV ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Data.Map.Base.Map TigerSymbol.Symbol TigerSres.EnvEntry
    -> Data.Map.Base.Map TigerSymbol.Symbol TigerTips.Tipo
    -> Data.Either.Either
         TigerSeman.SEErrores (TigerSres.FunEntry, TigerSeman.EstadoG)
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><S,U><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Types.Int)
                   (ww4 :: Data.Map.Base.Map TigerSymbol.Symbol TigerSres.EnvEntry)
                   (ww5 :: Data.Map.Base.Map TigerSymbol.Symbol TigerTips.Tipo) ->
                 case TigerSeman.$wpoly_go10
                        @ TigerSres.EnvEntry
                        ww
                        ww1
                        ww2
                        ww4 of wild {
                   GHC.Base.Nothing
                   -> Data.Either.Left
                        @ TigerSeman.SEErrores
                        @ (TigerSres.FunEntry, TigerSeman.EstadoG)
                        (TigerSeman.Internal
                           (TigerSymbol.addStr
                              TigerSeman.$fDaemonStateT_g
                              (Data.Text.Internal.Text ww ww1 ww2)))
                   GHC.Base.Just ds
                   -> case ds of wild1 {
                        TigerSres.Var ipv
                        -> case TigerSeman.$fManticoreStateT8
                           ret_ty (Data.Either.Either
                                     TigerSeman.SEErrores (TigerSres.FunEntry, TigerSeman.EstadoG))
                           of {}
                        TigerSres.Func f
                        -> Data.Either.Right
                             @ TigerSeman.SEErrores
                             @ (TigerSres.FunEntry, TigerSeman.EstadoG)
                             (f, TigerSeman.G ww3 ww4 ww5) } }) -}
08fb601f30bb3cd9c4bcc89986bb9dfc
  $w$cgetTipoT ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Data.Map.Base.Map TigerSymbol.Symbol TigerSres.EnvEntry
    -> Data.Map.Base.Map TigerSymbol.Symbol TigerTips.Tipo
    -> Data.Either.Either
         TigerSeman.SEErrores (TigerTips.Tipo, TigerSeman.EstadoG)
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,U><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Types.Int)
                   (ww4 :: Data.Map.Base.Map TigerSymbol.Symbol TigerSres.EnvEntry)
                   (ww5 :: Data.Map.Base.Map TigerSymbol.Symbol TigerTips.Tipo) ->
                 case TigerSeman.$wpoly_go10
                        @ TigerTips.Tipo
                        ww
                        ww1
                        ww2
                        ww5 of wild {
                   GHC.Base.Nothing
                   -> Data.Either.Left
                        @ TigerSeman.SEErrores
                        @ (TigerTips.Tipo, TigerSeman.EstadoG)
                        (TigerSeman.Internal
                           (TigerSymbol.addStr
                              TigerSeman.$fDaemonStateT_g
                              (Data.Text.Internal.Text ww ww1 ww2)))
                   GHC.Base.Just ty
                   -> Data.Either.Right
                        @ TigerSeman.SEErrores
                        @ (TigerTips.Tipo, TigerSeman.EstadoG)
                        (ty, TigerSeman.G ww3 ww4 ww5) }) -}
b3d9c333b2b609a46b498b561dc8d0d8
  $w$cgetTipoValV ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Data.Map.Base.Map TigerSymbol.Symbol TigerSres.EnvEntry
    -> Data.Map.Base.Map TigerSymbol.Symbol TigerTips.Tipo
    -> Data.Either.Either
         TigerSeman.SEErrores (TigerSres.ValEntry, TigerSeman.EstadoG)
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><S,U><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Types.Int)
                   (ww4 :: Data.Map.Base.Map TigerSymbol.Symbol TigerSres.EnvEntry)
                   (ww5 :: Data.Map.Base.Map TigerSymbol.Symbol TigerTips.Tipo) ->
                 case TigerSeman.$wpoly_go10
                        @ TigerSres.EnvEntry
                        ww
                        ww1
                        ww2
                        ww4 of wild {
                   GHC.Base.Nothing
                   -> Data.Either.Left
                        @ TigerSeman.SEErrores
                        @ (TigerSres.ValEntry, TigerSeman.EstadoG)
                        (TigerSeman.Internal
                           (TigerSymbol.addStr
                              TigerSeman.$fDaemonStateT_g
                              (Data.Text.Internal.Text ww ww1 ww2)))
                   GHC.Base.Just ds
                   -> case ds of wild1 {
                        TigerSres.Var v
                        -> Data.Either.Right
                             @ TigerSeman.SEErrores
                             @ (TigerSres.ValEntry, TigerSeman.EstadoG)
                             (v, TigerSeman.G ww3 ww4 ww5)
                        TigerSres.Func ipv
                        -> case TigerSeman.$fManticoreStateT6
                           ret_ty (Data.Either.Either
                                     TigerSeman.SEErrores (TigerSres.ValEntry, TigerSeman.EstadoG))
                           of {} } }) -}
1e82d4e9d33399d188f9ddd0557e6e90
  $w$cshowVEnv ::
    TigerSeman.EstadoG -> (# (GHC.Types.IO (), TigerSeman.EstadoG) #)
  {- Arity: 1, Strictness: <L,U(U,U,U)>, Inline: [0],
     Unfolding: (\ (w :: TigerSeman.EstadoG) ->
                 (# ((\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                      GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.shows6
                           (case w of wild { TigerSeman.G ds ds1 ds2 ->
                            GHC.Show.showLitString
                              (TigerSeman.$fManticoreStateT_go10
                                 (GHC.Types.[] @ GHC.Types.Char)
                                 ds1)
                              TigerSeman.$fManticoreStateT3 }))
                        GHC.Types.True
                        eta)
                       `cast`
                     (Sym (GHC.Types.N:IO[0] <()>_R)),
                     w) #)) -}
a57fc5219e330337d26632c310b02d8f
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> GHC.Types.Int
    -> Data.Map.Base.Map TigerSymbol.Symbol TigerSres.EnvEntry
    -> Data.Map.Base.Map TigerSymbol.Symbol TigerTips.Tipo
    -> GHC.Show.ShowS
  {- Arity: 4, Strictness: <S,U><L,U(U)><L,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: Data.Map.Base.Map TigerSymbol.Symbol TigerSres.EnvEntry)
                   (ww3 :: Data.Map.Base.Map TigerSymbol.Symbol TigerTips.Tipo) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = Data.Map.Base.$w$cshowsPrec
                       @ Data.Text.Internal.Text
                       @ TigerSres.EnvEntry
                       Data.Text.Show.$fShowText
                       TigerSres.$fShowEnvEntry
                       0#
                       ww2
                 } in
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = Data.Map.Base.$w$cshowsPrec
                       @ Data.Text.Internal.Text
                       @ TigerTips.Tipo
                       Data.Text.Show.$fShowText
                       TigerTips.$fShowTipo
                       0#
                       ww3
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       TigerSeman.$fShowEstadoG7
                       (GHC.Base.++
                          @ GHC.Types.Char
                          TigerSeman.$fShowEstadoG6
                          (case ww1 of ww4 { GHC.Types.I# ww5 ->
                           case GHC.Show.$wshowSignedInt
                                  0#
                                  ww5
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     TigerSeman.$fShowEstadoG5
                                     (GHC.Base.++
                                        @ GHC.Types.Char
                                        TigerSeman.$fShowEstadoG4
                                        (f (GHC.Base.++
                                              @ GHC.Types.Char
                                              TigerSeman.$fShowEstadoG5
                                              (GHC.Base.++
                                                 @ GHC.Types.Char
                                                 TigerSeman.$fShowEstadoG3
                                                 (f1
                                                    (GHC.Base.++
                                                       @ GHC.Types.Char
                                                       TigerSeman.$fShowEstadoG2
                                                       x))))))) of ww6 { (#,#) ww7 ww8 ->
                           GHC.Types.: @ GHC.Types.Char ww7 ww8 } }))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)) }) -}
4523d201572e6cb81553761759f96589
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> TigerSeman.SEErrores -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: TigerSeman.SEErrores)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   TigerSeman.NotFound b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             TigerSeman.$fShowSEErrores4
                             (case Data.Text.Show.$w$cshowsPrec b1 w1 of ww1 { (#,#) ww2 ww3 ->
                              GHC.Types.: @ GHC.Types.Char ww2 ww3 })
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                TigerSeman.$fShowSEErrores4
                                (case Data.Text.Show.$w$cshowsPrec
                                        b1
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.shows4
                                           w1) of ww1 { (#,#) ww2 ww3 ->
                                 GHC.Types.: @ GHC.Types.Char ww2 ww3 })) }
                   TigerSeman.DiffVal b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             TigerSeman.$fShowSEErrores3
                             (case Data.Text.Show.$w$cshowsPrec b1 w1 of ww1 { (#,#) ww2 ww3 ->
                              GHC.Types.: @ GHC.Types.Char ww2 ww3 })
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                TigerSeman.$fShowSEErrores3
                                (case Data.Text.Show.$w$cshowsPrec
                                        b1
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.shows4
                                           w1) of ww1 { (#,#) ww2 ww3 ->
                                 GHC.Types.: @ GHC.Types.Char ww2 ww3 })) }
                   TigerSeman.Internal b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             TigerSeman.$fShowSEErrores2
                             (case Data.Text.Show.$w$cshowsPrec b1 w1 of ww1 { (#,#) ww2 ww3 ->
                              GHC.Types.: @ GHC.Types.Char ww2 ww3 })
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                TigerSeman.$fShowSEErrores2
                                (case Data.Text.Show.$w$cshowsPrec
                                        b1
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.shows4
                                           w1) of ww1 { (#,#) ww2 ww3 ->
                                 GHC.Types.: @ GHC.Types.Char ww2 ww3 })) } }) -}
c7f442baaf5c9f7f2d2d6fd78a7c61b7
  $w$sgo4 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> a1
    -> Data.Map.Base.Map Data.Text.Internal.Text a1
    -> Data.Map.Base.Map Data.Text.Internal.Text a1
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,1*U><S,1*U>,
     Inline: [0] -}
5ac38a072a964fe9f003305f165de033
  $wourOrder :: GHC.Classes.Ord a => a -> a -> GHC.Types.Ordering
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLLC(C(S))LLL),U(1*U(1*C1(C1(U)),A),A,A,A,1*C1(C1(U)),A,A,A)><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   @ c
                   (w :: GHC.Classes.Ord a)
                   (ww :: a)
                   (ww1 :: a) ->
                 case GHC.Classes.> @ a w ww ww1 of wild {
                   GHC.Types.False
                   -> case GHC.Classes.==
                             @ a
                             (GHC.Classes.$p1Ord @ a w)
                             ww
                             ww1 of wild1 {
                        GHC.Types.False -> GHC.Types.LT GHC.Types.True -> GHC.Types.EQ }
                   GHC.Types.True -> GHC.Types.GT }) -}
e06495d3bf6152c86c3e385db826712a
  $wouter ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><L,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
29318aaa0c4bddd1560c51d67f11b12b
  $wpoly_go10 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Map.Base.Map TigerSymbol.Symbol a
    -> GHC.Base.Maybe a
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
725eb918db1ec1fcd556456484c595e4
  $wpoly_go4 ::
    GHC.Prim.Int#
    -> Data.Map.Base.Map Data.Text.Internal.Text a
    -> [(Data.Text.Internal.Text, a)]
    -> Data.Map.Base.Map Data.Text.Internal.Text a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
34c9d376a577e101b72e82ca106e3166
  data EstadoG
    = G {unique :: GHC.Types.Int,
         vEnv :: Data.Map.Base.Map TigerSymbol.Symbol TigerSres.EnvEntry,
         tEnv :: Data.Map.Base.Map TigerSymbol.Symbol TigerTips.Tipo}
30ba9bb49d52754d32bb564107b313bf
  class (TigerErrores.Daemon w, GHC.Base.Monad w) =>
        Manticore (w :: * -> *) where
    insertValV :: TigerSymbol.Symbol
                  -> TigerSres.ValEntry -> w a -> w a
    insertFunV :: TigerSymbol.Symbol
                  -> TigerSres.FunEntry -> w a -> w a
    insertVRO :: TigerSymbol.Symbol -> w a -> w a
    insertTipoT :: TigerSymbol.Symbol -> TigerTips.Tipo -> w a -> w a
    getTipoFunV :: TigerSymbol.Symbol -> w TigerSres.FunEntry
    getTipoValV :: TigerSymbol.Symbol -> w TigerSres.ValEntry
    getTipoT :: TigerSymbol.Symbol -> w TigerTips.Tipo
    showVEnv :: w (GHC.Types.IO ())
    showTEnv :: w ()
    tiposIguales :: TigerTips.Tipo
                    -> TigerTips.Tipo -> w GHC.Types.Bool
    ugen :: w TigerTips.Unique
    addTypos :: [(TigerSymbol.Symbol, TigerAbs.Ty, TigerAbs.Pos)]
                -> w ()
    {-# MINIMAL insertValV, insertFunV, insertVRO, insertTipoT,
                getTipoFunV, getTipoValV, getTipoT, showVEnv, showTEnv, ugen,
                addTypos #-}
34c9d376a577e101b72e82ca106e3166
  type OurState =
    Control.Monad.Trans.State.Lazy.StateT
      TigerSeman.EstadoG (Data.Either.Either TigerSeman.SEErrores)
    :: * -> *
4523d201572e6cb81553761759f96589
  data SEErrores
    = NotFound Data.Text.Internal.Text
    | DiffVal Data.Text.Internal.Text
    | Internal Data.Text.Internal.Text
b205aff06f6731b59d9b4c964d831633
  addpos ::
    (TigerErrores.Daemon w, GHC.Show.Show b) => w a -> b -> w a
  {- Arity: 4,
     Strictness: <S(LC(C(S))LLL),1*U(A,1*C1(C1(U)),A,A,A)><L,1*U(A,1*C1(U),A)><L,U><L,U>,
     Unfolding: (\ @ (w :: * -> *)
                   @ b
                   @ a
                   ($dDaemon :: TigerErrores.Daemon w)
                   ($dShow :: GHC.Show.Show b)
                   (t :: w a)
                   (p :: b) ->
                 TigerErrores.adder
                   @ w
                   $dDaemon
                   @ a
                   t
                   (case GHC.Show.show @ b $dShow p of dt { DEFAULT ->
                    case GHC.Magic.runRW#
                           @ 'GHC.Types.PtrRepLifted
                           @ Data.Text.Internal.Text
                           (\ (s3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                            case GHC.Prim.newByteArray#
                                   @ GHC.Prim.RealWorld
                                   10#
                                   s3 of ds1 { (#,#) ipv ipv1 ->
                            TigerSeman.$wouter ipv1 4# dt 0# ipv }) of ds1 { (#,#) ipv ipv1 ->
                    ipv1 } })) -}
beb9519557c4e6a241e96764ad079fc1
  buscarM ::
    TigerSymbol.Symbol
    -> [(TigerSymbol.Symbol, TigerTips.Tipo, GHC.Types.Int)]
    -> GHC.Base.Maybe TigerTips.Tipo
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U,U,U)><S,1*U> -}
551358d800c1a1886ac744a5a4b0d4c9
  cmpZip ::
    TigerSeman.Manticore m =>
    [(TigerSymbol.Symbol, TigerTips.Tipo)]
    -> [(TigerSymbol.Symbol, TigerTips.Tipo, GHC.Types.Int)]
    -> m GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LSLLLLLLLLLLLL),U(A,U,A,A,A,A,A,A,A,A,A,C(C1(U)),A,A)><S,1*U><S,1*U> -}
e23c877e1713c05f6f63fa77648b6e9c
  depend :: TigerAbs.Ty -> [TigerSymbol.Symbol]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: TigerAbs.Ty) ->
                 case ds of wild {
                   TigerAbs.NameTy s3
                   -> GHC.Types.:
                        @ TigerSymbol.Symbol
                        s3
                        (GHC.Types.[] @ TigerSymbol.Symbol)
                   TigerAbs.RecordTy ts -> TigerSeman.depend_go ts
                   TigerAbs.ArrayTy s3
                   -> GHC.Types.:
                        @ TigerSymbol.Symbol
                        s3
                        (GHC.Types.[] @ TigerSymbol.Symbol) }) -}
003097d0611cd0a33656a91da393cf85
  depend_go ::
    [(TigerSymbol.Symbol, GHC.Types.Bool, TigerAbs.Ty)]
    -> [TigerSymbol.Symbol]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
ccb3979d285fd4cfb962c2778ca37d7c
  errAppend ::
    TigerSeman.SEErrores -> TigerSymbol.Symbol -> TigerSeman.SEErrores
  {- Arity: 2, Strictness: <S,1*U><L,1*U(U,U,U)> -}
d51f1a92e07ba3458015941659a56366
  fromTy :: TigerSeman.Manticore w => TigerAbs.Ty -> w TigerTips.Tipo
  {- Arity: 2,
     Strictness: <S(LLLLLLLLC(S)LLLLL),1*U(A,A,A,A,A,A,A,A,1*C1(U),A,A,A,A,A)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ (w :: * -> *)
                   ($dManticore :: TigerSeman.Manticore w)
                   (ds :: TigerAbs.Ty) ->
                 case ds of wild {
                   DEFAULT -> TigerSeman.fromTy1 @ w
                   TigerAbs.NameTy s3 -> TigerSeman.getTipoT @ w $dManticore s3 }) -}
a754d03fef58260d4d2748315545c7ba
  fromTy1 :: w TigerTips.Tipo
  {- Strictness: x -}
4ca9ddc26df100eb810e424b8f6515ce
  initConf :: TigerSeman.EstadoG
  {- Strictness: m,
     Unfolding: (TigerSeman.G
                   TigerSeman.initConf60
                   TigerSeman.initConf3
                   TigerSeman.initConf1) -}
e21f2240b2c4ce254e256c3340e98efd
  initConf1 ::
    Data.Map.Base.Map Data.Text.Internal.Text TigerTips.Tipo
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        "string"# of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 case Data.Text.Show.unpackCString#
                        "int"# of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 TigerSeman.$w$sgo4
                   @ TigerTips.Tipo
                   ww1
                   ww2
                   ww3
                   TigerSeman.initConf2
                   (Data.Map.Base.Bin
                      @ Data.Text.Internal.Text
                      @ TigerTips.Tipo
                      1#
                      dt
                      TigerTips.TString
                      (Data.Map.Base.Tip @ Data.Text.Internal.Text @ TigerTips.Tipo)
                      (Data.Map.Base.Tip
                         @ Data.Text.Internal.Text
                         @ TigerTips.Tipo)) } }) -}
f63502040dbebb8b65cbc861b6b6c3f6
  initConf10 :: [(Data.Text.Internal.Text, TigerSres.EnvEntry)]
  {- Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, TigerSres.EnvEntry)
                   TigerSeman.initConf30
                   TigerSeman.initConf11) -}
99354d79323d72b96ba6739a7298cf3c
  initConf11 :: [(Data.Text.Internal.Text, TigerSres.EnvEntry)]
  {- Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, TigerSres.EnvEntry)
                   TigerSeman.initConf24
                   TigerSeman.initConf12) -}
7995f09a1a889f48cebf3dac30e85b0f
  initConf12 :: [(Data.Text.Internal.Text, TigerSres.EnvEntry)]
  {- Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, TigerSres.EnvEntry)
                   TigerSeman.initConf20
                   TigerSeman.initConf13) -}
e784ddf3980b8bb0234590a812f49857
  initConf13 :: [(Data.Text.Internal.Text, TigerSres.EnvEntry)]
  {- Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, TigerSres.EnvEntry)
                   TigerSeman.initConf14
                   (GHC.Types.[] @ (Data.Text.Internal.Text, TigerSres.EnvEntry))) -}
9866f7400c7bd443119bb059e636bf74
  initConf14 :: (Data.Text.Internal.Text, TigerSres.EnvEntry)
  {- Unfolding: ((TigerSeman.initConf18, TigerSeman.initConf15)) -}
73b97ab66ace7107e0a971b20d030359
  initConf15 :: TigerSres.EnvEntry
  {- Unfolding: (TigerSres.Func TigerSeman.initConf16) -}
9aea6a6a3154a8c29377aff890ae9103
  initConf16 ::
    (GHC.Types.Int, Data.Text.Internal.Text, [TigerTips.Tipo],
     TigerTips.Tipo, GHC.Types.Bool)
  {- Unfolding: ((TigerSeman.initConf19, TigerSeman.initConf18,
                  TigerSeman.initConf17, TigerTips.TUnit, GHC.Types.True)) -}
223b1486d12b626452c18b46b57df073
  initConf17 :: [TigerTips.Tipo]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ TigerTips.Tipo
                   TigerSeman.initConf2
                   (GHC.Types.[] @ TigerTips.Tipo)) -}
c7204ce08a7b7805e219f86f9ebbfc1f
  initConf18 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "exit"#) -}
5fd84eb82ce9c9d44fcea2c05d987f8c
  initConf19 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 1#) -}
b552ec1f846706142e23cdb27a99e81f
  initConf2 :: TigerTips.Tipo
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (TigerTips.TInt TigerTips.RW) -}
9fa83d36db1ff862436e3e293d87a198
  initConf20 :: (Data.Text.Internal.Text, TigerSres.EnvEntry)
  {- Unfolding: ((TigerSeman.initConf23, TigerSeman.initConf21)) -}
9c0053be77c47bcacc0d9bf232c4945e
  initConf21 :: TigerSres.EnvEntry
  {- Unfolding: (TigerSres.Func TigerSeman.initConf22) -}
e5761e2083318500f3130f01db5054c0
  initConf22 ::
    (GHC.Types.Int, Data.Text.Internal.Text, [TigerTips.Tipo],
     TigerTips.Tipo, GHC.Types.Bool)
  {- Unfolding: ((TigerSeman.initConf19, TigerSeman.initConf23,
                  TigerSeman.initConf17, TigerSeman.initConf2, GHC.Types.True)) -}
eeaf712773a3bb165c1ba4f6e2a5ec76
  initConf23 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "not"#) -}
18eba270de43f6e8d7ed3005935ab88a
  initConf24 :: (Data.Text.Internal.Text, TigerSres.EnvEntry)
  {- Unfolding: ((TigerSeman.initConf29, TigerSeman.initConf25)) -}
e5f3a3eda579c186c00009856bc41989
  initConf25 :: TigerSres.EnvEntry
  {- Unfolding: (TigerSres.Func TigerSeman.initConf26) -}
3350a9d32fe76a522f3c6a8582de9485
  initConf26 ::
    (GHC.Types.Int, Data.Text.Internal.Text, [TigerTips.Tipo],
     TigerTips.Tipo, GHC.Types.Bool)
  {- Unfolding: ((TigerSeman.initConf19, TigerSeman.initConf29,
                  TigerSeman.initConf27, TigerTips.TString, GHC.Types.True)) -}
5926a153f9bd0ef4c5dc6c210e0c073d
  initConf27 :: [TigerTips.Tipo]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ TigerTips.Tipo
                   TigerTips.TString
                   TigerSeman.initConf28) -}
3bba9dde889d027ab31158f6bf7b4205
  initConf28 :: [TigerTips.Tipo]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ TigerTips.Tipo
                   TigerTips.TString
                   (GHC.Types.[] @ TigerTips.Tipo)) -}
a262604e5643b6c4787737354d05e890
  initConf29 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "concat"#) -}
cfddd8483a05accac9f6869ac575e039
  initConf3 ::
    Data.Map.Base.Map Data.Text.Internal.Text TigerSres.EnvEntry
  {- Unfolding: (TigerSeman.$sfromList
                   @ TigerSres.EnvEntry
                   TigerSeman.initConf4) -}
924b008b9512a5eefdc912ebfff1bfa7
  initConf30 :: (Data.Text.Internal.Text, TigerSres.EnvEntry)
  {- Unfolding: ((TigerSeman.initConf35, TigerSeman.initConf31)) -}
c049d3c6dfa3d7d76985f41dcb8f4f7c
  initConf31 :: TigerSres.EnvEntry
  {- Unfolding: (TigerSres.Func TigerSeman.initConf32) -}
79fe02b402711c4066c383362352e013
  initConf32 ::
    (GHC.Types.Int, Data.Text.Internal.Text, [TigerTips.Tipo],
     TigerTips.Tipo, GHC.Types.Bool)
  {- Unfolding: ((TigerSeman.initConf19, TigerSeman.initConf35,
                  TigerSeman.initConf33, TigerTips.TString, GHC.Types.True)) -}
3116777d6eb0596bb4ec91b14e31092e
  initConf33 :: [TigerTips.Tipo]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ TigerTips.Tipo
                   TigerTips.TString
                   TigerSeman.initConf34) -}
79e13b5f01e28e2abf4ecdaad4f7a253
  initConf34 :: [TigerTips.Tipo]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ TigerTips.Tipo
                   TigerSeman.initConf2
                   TigerSeman.initConf17) -}
b1a85d9a6c64290cdfa73459ff148c53
  initConf35 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "substring"#) -}
9cd61d2f4ffd02ae965620ab7cdea1e9
  initConf36 :: (Data.Text.Internal.Text, TigerSres.EnvEntry)
  {- Unfolding: ((TigerSeman.initConf39, TigerSeman.initConf37)) -}
bea754f5e2d4fb676523a7e4ee9bc0ca
  initConf37 :: TigerSres.EnvEntry
  {- Unfolding: (TigerSres.Func TigerSeman.initConf38) -}
8720d39a154445c395809e3781bd5bd9
  initConf38 ::
    (GHC.Types.Int, Data.Text.Internal.Text, [TigerTips.Tipo],
     TigerTips.Tipo, GHC.Types.Bool)
  {- Unfolding: ((TigerSeman.initConf19, TigerSeman.initConf39,
                  TigerSeman.initConf28, TigerSeman.initConf2, GHC.Types.True)) -}
172ed481c0fbd400c25b7867c2f95421
  initConf39 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "size"#) -}
5759d4b1722158f090326147f94fb0f1
  initConf4 :: [(Data.Text.Internal.Text, TigerSres.EnvEntry)]
  {- Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, TigerSres.EnvEntry)
                   TigerSeman.initConf56
                   TigerSeman.initConf5) -}
388c6b782277fff997f3fca97dc32998
  initConf40 :: (Data.Text.Internal.Text, TigerSres.EnvEntry)
  {- Unfolding: ((TigerSeman.initConf43, TigerSeman.initConf41)) -}
9d1e5061c3a8d2fbb7b1041d94fa27b4
  initConf41 :: TigerSres.EnvEntry
  {- Unfolding: (TigerSres.Func TigerSeman.initConf42) -}
4a7c5115f29b635857e43bc7c23e99e1
  initConf42 ::
    (GHC.Types.Int, Data.Text.Internal.Text, [TigerTips.Tipo],
     TigerTips.Tipo, GHC.Types.Bool)
  {- Unfolding: ((TigerSeman.initConf19, TigerSeman.initConf43,
                  TigerSeman.initConf17, TigerTips.TString, GHC.Types.True)) -}
06b3d842aa573bffad975d6bf168d548
  initConf43 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "chr"#) -}
78e09efcc7fab7b892671eaa373d05f7
  initConf44 :: (Data.Text.Internal.Text, TigerSres.EnvEntry)
  {- Unfolding: ((TigerSeman.initConf47, TigerSeman.initConf45)) -}
c5cab1d92aad679516d3a8bfb1882a22
  initConf45 :: TigerSres.EnvEntry
  {- Unfolding: (TigerSres.Func TigerSeman.initConf46) -}
4279b31305b025bc7320ed4c3fbdd6eb
  initConf46 ::
    (GHC.Types.Int, Data.Text.Internal.Text, [TigerTips.Tipo],
     TigerTips.Tipo, GHC.Types.Bool)
  {- Unfolding: ((TigerSeman.initConf19, TigerSeman.initConf47,
                  TigerSeman.initConf28, TigerSeman.initConf2, GHC.Types.True)) -}
8d05587b3d0663cca6e3121c4dd91b2f
  initConf47 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "ord"#) -}
b1996ec0e6d2329a22c47721421bbf0b
  initConf48 :: (Data.Text.Internal.Text, TigerSres.EnvEntry)
  {- Unfolding: ((TigerSeman.initConf51, TigerSeman.initConf49)) -}
a5e593580cd1d8fc50e1e1af24c394eb
  initConf49 :: TigerSres.EnvEntry
  {- Unfolding: (TigerSres.Func TigerSeman.initConf50) -}
464757daf107afe74d80ce2072e16513
  initConf5 :: [(Data.Text.Internal.Text, TigerSres.EnvEntry)]
  {- Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, TigerSres.EnvEntry)
                   TigerSeman.initConf52
                   TigerSeman.initConf6) -}
e1e5b6d5969173d01e263ab599e9769e
  initConf50 ::
    (GHC.Types.Int, Data.Text.Internal.Text, [TigerTips.Tipo],
     TigerTips.Tipo, GHC.Types.Bool)
  {- Unfolding: ((TigerSeman.initConf19, TigerSeman.initConf51,
                  GHC.Types.[] @ TigerTips.Tipo, TigerTips.TString,
                  GHC.Types.True)) -}
09be63dff76c561bc56ccc0d1571b000
  initConf51 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "getchar"#) -}
c759127643092dec96f91706b9a937c3
  initConf52 :: (Data.Text.Internal.Text, TigerSres.EnvEntry)
  {- Unfolding: ((TigerSeman.initConf55, TigerSeman.initConf53)) -}
6c3b34e1aa50f8dc2a91819081c5d5ee
  initConf53 :: TigerSres.EnvEntry
  {- Unfolding: (TigerSres.Func TigerSeman.initConf54) -}
a289a1d85d3b66dfb90f5478325dd189
  initConf54 ::
    (GHC.Types.Int, Data.Text.Internal.Text, [TigerTips.Tipo],
     TigerTips.Tipo, GHC.Types.Bool)
  {- Unfolding: ((TigerSeman.initConf19, TigerSeman.initConf55,
                  GHC.Types.[] @ TigerTips.Tipo, TigerTips.TUnit, GHC.Types.True)) -}
40aa1dcc94e3279b590bf8a694b90a06
  initConf55 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "flush"#) -}
2425c684508590766a905234a66e545f
  initConf56 :: (Data.Text.Internal.Text, TigerSres.EnvEntry)
  {- Unfolding: ((TigerSeman.initConf59, TigerSeman.initConf57)) -}
cf106fe68986ee7158f2f009b443aa65
  initConf57 :: TigerSres.EnvEntry
  {- Unfolding: (TigerSres.Func TigerSeman.initConf58) -}
09448318aeb1a1c67ca2d5091877158e
  initConf58 ::
    (GHC.Types.Int, Data.Text.Internal.Text, [TigerTips.Tipo],
     TigerTips.Tipo, GHC.Types.Bool)
  {- Unfolding: ((TigerSeman.initConf19, TigerSeman.initConf59,
                  TigerSeman.initConf28, TigerTips.TUnit, GHC.Types.True)) -}
955294624f796bf5ea4ae0e79662e5c7
  initConf59 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "print"#) -}
b02001026814b641a4e82b54d75a2b05
  initConf6 :: [(Data.Text.Internal.Text, TigerSres.EnvEntry)]
  {- Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, TigerSres.EnvEntry)
                   TigerSeman.initConf48
                   TigerSeman.initConf7) -}
af241474a3d4684448c9d1c248df0235
  initConf60 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
09024906d959b8d439148841d530e2e2
  initConf7 :: [(Data.Text.Internal.Text, TigerSres.EnvEntry)]
  {- Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, TigerSres.EnvEntry)
                   TigerSeman.initConf44
                   TigerSeman.initConf8) -}
c3fac76b09e87eb67b8dfb5332b92608
  initConf8 :: [(Data.Text.Internal.Text, TigerSres.EnvEntry)]
  {- Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, TigerSres.EnvEntry)
                   TigerSeman.initConf40
                   TigerSeman.initConf9) -}
7c75a5e275e265c6de5ba28d39da4cae
  initConf9 :: [(Data.Text.Internal.Text, TigerSres.EnvEntry)]
  {- Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, TigerSres.EnvEntry)
                   TigerSeman.initConf36
                   TigerSeman.initConf10) -}
7a75000351ea295eb94e15082718d765
  okOp ::
    TigerTips.Tipo -> TigerTips.Tipo -> TigerAbs.Oper -> GHC.Types.Bool
  {- Arity: 3, Strictness: <S,U><L,U><S,U>,
     Unfolding: (\ (ds :: TigerTips.Tipo)
                   (ds1 :: TigerTips.Tipo)
                   (ds2 :: TigerAbs.Oper) ->
                 let {
                   fail :: GHC.Prim.Void# -> GHC.Types.Bool
                     {- Arity: 1, Strictness: <L,A> -}
                   = \ (ds3 :: GHC.Prim.Void#)[OneShot] ->
                     case ds2 of wild {
                       DEFAULT
                       -> case ds of wild1 {
                            DEFAULT
                            -> case wild of wild2 {
                                 DEFAULT -> TigerSeman.okOp1 TigerAbs.NeqOp -> GHC.Types.True }
                            TigerTips.TUnit
                            -> case wild of wild2 {
                                 DEFAULT -> TigerSeman.okOp1 TigerAbs.NeqOp -> GHC.Types.False }
                            TigerTips.TNil
                            -> case ds1 of wild2 {
                                 DEFAULT
                                 -> case wild of wild3 {
                                      DEFAULT -> TigerSeman.okOp1 TigerAbs.NeqOp -> GHC.Types.True }
                                 TigerTips.TNil
                                 -> case wild of wild3 {
                                      DEFAULT -> TigerSeman.okOp1
                                      TigerAbs.NeqOp -> GHC.Types.False } } }
                       TigerAbs.EqOp -> GHC.Types.True }
                 } in
                 case ds of wild {
                   DEFAULT -> fail GHC.Prim.void#
                   TigerTips.TUnit
                   -> case ds2 of wild1 {
                        DEFAULT -> fail GHC.Prim.void# TigerAbs.EqOp -> GHC.Types.False }
                   TigerTips.TNil
                   -> case ds1 of wild1 {
                        DEFAULT -> fail GHC.Prim.void#
                        TigerTips.TNil
                        -> case ds2 of wild2 {
                             DEFAULT -> fail GHC.Prim.void#
                             TigerAbs.EqOp -> GHC.Types.False } } }) -}
ce19229c9b21289deac616e18624117f
  okOp1 :: GHC.Types.Bool
  {- Strictness: x -}
adf58003be2e72a0c5e6c1cfd35546b6
  ourOrder ::
    (GHC.Classes.Eq a, GHC.Classes.Ord a) =>
    (a, b, c) -> (a, b, c) -> GHC.Types.Ordering
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,A><S(LLLLC(C(S))LLL),U(1*U(1*C1(C1(U)),A),A,A,A,1*C1(C1(U)),A,A,A)><S,1*U(U,A,A)><S,1*U(U,A,A)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   @ c
                   (w :: GHC.Classes.Eq a)
                   (w1 :: GHC.Classes.Ord a)
                   (w2 :: (a, b, c))
                   (w3 :: (a, b, c)) ->
                 case w2 of ww { (,,) ww1 ww2 ww3 ->
                 case w3 of ww4 { (,,) ww5 ww6 ww7 ->
                 TigerSeman.$wourOrder @ a @ b @ c w1 ww1 ww5 } }) -}
3654f7ebe5ac303e65454148f4f88ffe
  tEnv ::
    TigerSeman.EstadoG
    -> Data.Map.Base.Map TigerSymbol.Symbol TigerTips.Tipo
  RecSel Left TigerSeman.EstadoG
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: TigerSeman.EstadoG) ->
                 case ds of wild { TigerSeman.G ds1 ds2 ds3 -> ds3 }) -}
7329c788c6378e7502554b9bed67d5f3
  trDec ::
    TigerSeman.Manticore w => TigerAbs.Dec -> w a -> w TigerTips.Tipo
  {- Arity: 1,
     Strictness: <L,U(U,U,C(C1(C1(U))),A,C(C1(U)),A,C(U),C(U),C(U),A,A,C(C1(U)),U,A)> -}
f03f4876fffdf4300f695a8d51a6aa9f
  transDecs :: TigerSeman.Manticore w => [TigerAbs.Dec] -> w a -> w a
  {- Arity: 3,
     Strictness: <S(LSLLLLLLLLLLLL),U(U,U,C(C1(C1(U))),A,C(C1(U)),A,C(U),C(U),C(U),A,A,C(C1(U)),U,A)><S,1*U><L,U> -}
f0e0d63a74b4058e7b5f6f4bbd328458
  transExp ::
    TigerSeman.Manticore w => TigerAbs.Exp -> w TigerTips.Tipo
  {- Arity: 1,
     Strictness: <L,U(U,U,C(C1(C1(U))),A,C(C1(U)),A,C(U),C(U),C(U),A,A,C(C1(U)),U,A)> -}
88dd3724f75d63969fce35b684997ae6
  transTy ::
    TigerSeman.Manticore w => TigerAbs.Ty -> w TigerTips.Tipo
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,U(A,U,A,A,A,A,A,A,C(U),A,A,A,U,A)><S,1*U> -}
5b40dec1d3e58d7682e70e9d22884820
  transVar ::
    TigerSeman.Manticore w => TigerAbs.Var -> w TigerTips.Tipo
  {- Arity: 2,
     Strictness: <S,U(U,U,C(C1(C1(U))),A,C(C1(U)),A,C(U),C(U),C(U),A,A,C(C1(U)),U,A)><S,1*U> -}
e872f314ddc4f31a52ec06c7219ce3ee
  unique :: TigerSeman.EstadoG -> GHC.Types.Int
  RecSel Left TigerSeman.EstadoG
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U(U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: TigerSeman.EstadoG) ->
                 case ds of wild { TigerSeman.G ds1 ds2 ds3 -> ds1 }) -}
981f97a7bf134b8991f35fcbffc29bb2
  vEnv ::
    TigerSeman.EstadoG
    -> Data.Map.Base.Map TigerSymbol.Symbol TigerSres.EnvEntry
  RecSel Left TigerSeman.EstadoG
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: TigerSeman.EstadoG) ->
                 case ds of wild { TigerSeman.G ds1 ds2 ds3 -> ds2 }) -}
instance TigerErrores.Daemon [Control.Monad.Trans.State.Lazy.StateT]
  = TigerSeman.$fDaemonStateT
instance TigerSeman.Manticore [Control.Monad.Trans.State.Lazy.StateT]
  = TigerSeman.$fManticoreStateT
instance GHC.Show.Show [TigerSeman.EstadoG]
  = TigerSeman.$fShowEstadoG
instance GHC.Show.Show [TigerSeman.SEErrores]
  = TigerSeman.$fShowSEErrores
"SPEC/TigerSeman $fApplicativeStateT @ (Either SEErrores) _" [ALWAYS] forall @ s3
                                                                             ($dMonad :: GHC.Base.Monad
                                                                                           (Data.Either.Either
                                                                                              TigerSeman.SEErrores))
                                                                             ($dFunctor :: GHC.Base.Functor
                                                                                             (Data.Either.Either
                                                                                                TigerSeman.SEErrores))
  Control.Monad.Trans.State.Lazy.$fApplicativeStateT @ (Data.Either.Either
                                                          TigerSeman.SEErrores)
                                                     @ s3
                                                     $dFunctor
                                                     $dMonad
  = TigerSeman.$fManticoreStateT_$s$fApplicativeStateT @ s3
"SPEC/TigerSeman $fApplicativeStateT_$c<*> @ (Either SEErrores) _" [ALWAYS] forall @ s3
                                                                                   ($dMonad :: GHC.Base.Monad
                                                                                                 (Data.Either.Either
                                                                                                    TigerSeman.SEErrores))
                                                                                   ($dFunctor :: GHC.Base.Functor
                                                                                                   (Data.Either.Either
                                                                                                      TigerSeman.SEErrores))
  Control.Monad.Trans.State.Lazy.$fApplicativeStateT_$c<*> @ (Data.Either.Either
                                                                TigerSeman.SEErrores)
                                                           @ s3
                                                           $dFunctor
                                                           $dMonad
  = TigerSeman.$fManticoreStateT_$s$fApplicativeStateT_$c<*> @ s3
"SPEC/TigerSeman $fApplicativeStateT_$cpure @ (Either SEErrores) _" [ALWAYS] forall @ s3
                                                                                    ($dMonad :: GHC.Base.Monad
                                                                                                  (Data.Either.Either
                                                                                                     TigerSeman.SEErrores))
                                                                                    ($dFunctor :: GHC.Base.Functor
                                                                                                    (Data.Either.Either
                                                                                                       TigerSeman.SEErrores))
  Control.Monad.Trans.State.Lazy.$fApplicativeStateT_$cpure @ (Data.Either.Either
                                                                 TigerSeman.SEErrores)
                                                            @ s3
                                                            $dFunctor
                                                            $dMonad
  = TigerSeman.$fManticoreStateT_$s$fApplicativeStateT_$cpure @ s3
"SPEC/TigerSeman $fMonadStateT @ (Either SEErrores) _" [ALWAYS] forall @ s3
                                                                       ($dMonad :: GHC.Base.Monad
                                                                                     (Data.Either.Either
                                                                                        TigerSeman.SEErrores))
  Control.Monad.Trans.State.Lazy.$fMonadStateT @ (Data.Either.Either
                                                    TigerSeman.SEErrores)
                                               @ s3
                                               $dMonad
  = TigerSeman.$fManticoreStateT_$s$fMonadStateT @ s3
"SPEC/TigerSeman $fMonadStateT_$c>> @ (Either SEErrores) _" [ALWAYS] forall @ s3
                                                                            ($dMonad :: GHC.Base.Monad
                                                                                          (Data.Either.Either
                                                                                             TigerSeman.SEErrores))
  Control.Monad.Trans.State.Lazy.$fMonadStateT_$c>> @ (Data.Either.Either
                                                         TigerSeman.SEErrores)
                                                    @ s3
                                                    $dMonad
  = TigerSeman.$fManticoreStateT_$s$fMonadStateT_$c>> @ s3
"SPEC/TigerSeman $fMonadStateT_$c>>= @ (Either SEErrores) _" [ALWAYS] forall @ s3
                                                                             ($dMonad :: GHC.Base.Monad
                                                                                           (Data.Either.Either
                                                                                              TigerSeman.SEErrores))
  Control.Monad.Trans.State.Lazy.$fMonadStateT_$c>>= @ (Data.Either.Either
                                                          TigerSeman.SEErrores)
                                                     @ s3
                                                     $dMonad
  = TigerSeman.$fManticoreStateT_$s$fMonadStateT_$c>>= @ s3
"SPEC/TigerSeman $fMonadStateT_$cfail @ (Either SEErrores) _" [ALWAYS] forall @ s3
                                                                              ($dMonad :: GHC.Base.Monad
                                                                                            (Data.Either.Either
                                                                                               TigerSeman.SEErrores))
  Control.Monad.Trans.State.Lazy.$fMonadStateT_$cfail @ (Data.Either.Either
                                                           TigerSeman.SEErrores)
                                                      @ s3
                                                      $dMonad
  = TigerSeman.$fManticoreStateT_$s$fMonadStateT_$cfail @ s3
"SPEC/TigerSeman $fMonadStateT_$cp1Monad @ (Either SEErrores) _" [ALWAYS] forall @ s3
                                                                                 ($dMonad :: GHC.Base.Monad
                                                                                               (Data.Either.Either
                                                                                                  TigerSeman.SEErrores))
  Control.Monad.Trans.State.Lazy.$fMonadStateT_$cp1Monad @ (Data.Either.Either
                                                              TigerSeman.SEErrores)
                                                         @ s3
                                                         $dMonad
  = TigerSeman.$fManticoreStateT_$s$fMonadStateT_$cp1Monad @ s3
"SPEC/TigerSeman fromList @ Text _" [ALWAYS] forall @ a
                                                    ($dOrd :: GHC.Classes.Ord
                                                                Data.Text.Internal.Text)
  Data.Map.Strict.fromList @ Data.Text.Internal.Text @ a $dOrd
  = TigerSeman.$sfromList @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

