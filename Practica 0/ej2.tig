    /*ejercicio 2*/
let 
  type lista = {item:int, resto:lista}
   
  /*definicion de cons*/
  function cons(i:int, l:lista):lista =
    lista{item = i, resto = l}
    
  /*definicion de length*/
  function length(l:lista):int =
    if l = nil then 0 else 1 + length (l.resto)

  /*defincion de concat*/
  function concat1(l:lista, r:lista):lista =
    if l = nil then r else lista {item = l.item, resto = concat1((l.resto), r)} 
 
  /*defincion de snoc*/
  function snoc(x:int, l:lista):lista =
    concat1(l, (lista {item = x, resto = nil}))

  /*defincion de filtra*/
  function filtra(n:int, l:lista):lista=
    if l = nil then nil else 
      if l.item <> n then lista{item = l.item, resto = filtra(n, (l.resto))} else filtra(n, (l.resto))

  /*defincion de isin*/
  function isin(x:int, xs:lista):int=
    if xs=nil then 0 else 
      if xs.item = x then 1 else isin(x, (xs.resto))

  /*defincion de remove*/
  function remove(x:int, xs:lista):lista=
    let function rem(n:int, l:lista):lista=
      if l = nil then nil else 
        if l.item = n then l.resto else cons((l.item), (rem (n, (l.resto))))
    in 
      if isin(x, xs) then rem(x, xs) else xs
    end
    
  /*defincion de removeall*/
  function removeall(x:int,xs:lista):lista=
    filtra(x, xs)

  /*defincion de reverse*/
  function reverse(l:lista):lista= 
    if l = nil then nil else snoc(l.item, (reverse (l.resto)))

  /*defincion de printlist*/
  function printint (i : int) =
    let function f (i : int) =
      if i > 0
      then (f (i/10); print (chr (i-i/10*10+ord ("0"))))
    in 
      if i < 0 then (print ("-"); f (-i))
      else if i>0 then f (i)
      else print ("0")
    end

  function printitems (l:lista) =
    if l.resto = nil then printint(l.item) else (printint (l.item); print (", "); printitems (l.resto))         

  function printlist(l:lista) = 
    if l = nil then print("\n") else (print("["); printitems(l); print("]"); print("\n"))
in
   nil; printlist(reverse (cons(1, cons(2, cons(3, nil))))); 0 /*nil es tipo polimorfico de los records que definimos como lista*/
end

